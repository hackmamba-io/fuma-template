{"type":"route","meta":{"status":200,"headers":{"content-type":"text/markdown","x-next-cache-tags":"_N_T_/layout,_N_T_/llms.mdx/layout,_N_T_/llms.mdx/[[...slug]]/layout,_N_T_/llms.mdx/[[...slug]]/route,_N_T_/llms.mdx/developer-tools/troubleshooting"}},"body":"# Troubleshooting (/docs/developer-tools/troubleshooting)\n\n# Troubleshooting\n\nCommon issues and solutions when integrating with our API.\n\n## Authentication Issues\n\n### Invalid API Key\n\n**Error**: `invalid_api_key`\n\n**Symptoms**:\n\n* 401 Unauthorized responses\n* \"Invalid API key\" error messages\n\n**Solutions**:\n\n1. Verify your API key is correct\n2. Check for extra spaces or characters\n3. Ensure you're using the right environment (sandbox vs production)\n4. Regenerate your API key if needed\n\n```bash\n# Check your API key format\necho $HACKMAMBA_API_KEY\n# Should start with sk_test_ or sk_live_\n```\n\n### Expired Token\n\n**Error**: `expired_token`\n\n**Symptoms**:\n\n* 401 Unauthorized responses\n* \"Token has expired\" error messages\n\n**Solutions**:\n\n1. Refresh your access token\n2. Implement automatic token refresh\n3. Check your system clock synchronization\n\n```javascript\n// Implement token refresh\nasync function refreshToken() {\n  const response = await fetch(\"/oauth/token\", {\n    method: \"POST\",\n    body: new URLSearchParams({\n      grant_type: \"refresh_token\",\n      refresh_token: storedRefreshToken,\n    }),\n  });\n\n  const data = await response.json();\n  // Store new tokens\n}\n```\n\n## Rate Limiting Issues\n\n### Rate Limit Exceeded\n\n**Error**: `rate_limit_exceeded`\n\n**Symptoms**:\n\n* 429 Too Many Requests responses\n* `X-RateLimit-Remaining: 0` headers\n\n**Solutions**:\n\n1. Implement exponential backoff\n2. Reduce request frequency\n3. Use batch endpoints when available\n4. Upgrade your plan for higher limits\n\n```javascript\n// Exponential backoff implementation\nasync function makeRequestWithBackoff(url, options, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      const response = await fetch(url, options);\n\n      if (response.status === 429) {\n        const retryAfter = response.headers.get(\"Retry-After\");\n        const delay = retryAfter\n          ? parseInt(retryAfter) * 1000\n          : Math.pow(2, i) * 1000;\n\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        continue;\n      }\n\n      return response;\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n    }\n  }\n}\n```\n\n## Webhook Issues\n\n### Webhook Not Receiving Events\n\n**Symptoms**:\n\n* No webhook events received\n* Events not triggering\n\n**Solutions**:\n\n1. Verify webhook URL is accessible\n2. Check webhook registration\n3. Ensure HTTPS is used in production\n4. Verify signature validation\n\n```bash\n# Test webhook endpoint\ncurl -X POST https://your-webhook-url.com/webhooks \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"test\": \"data\"}'\n```\n\n### Invalid Webhook Signature\n\n**Error**: Signature verification fails\n\n**Solutions**:\n\n1. Verify webhook secret is correct\n2. Check signature calculation\n3. Ensure raw request body is used\n\n```javascript\n// Correct signature verification\nconst crypto = require(\"crypto\");\n\nfunction verifyWebhookSignature(payload, signature, secret) {\n  const expectedSignature = crypto\n    .createHmac(\"sha256\", secret)\n    .update(payload, \"utf8\") // Use raw body\n    .digest(\"hex\");\n\n  return signature === `sha256=${expectedSignature}`;\n}\n```\n\n## Data Issues\n\n### User Not Found\n\n**Error**: `user_not_found`\n\n**Solutions**:\n\n1. Verify user ID is correct\n2. Check if user was deleted\n3. Ensure you're querying the right environment\n\n```javascript\n// Safe user retrieval\nasync function getUserSafely(userId) {\n  try {\n    return await client.users.get(userId);\n  } catch (error) {\n    if (error.code === \"user_not_found\") {\n      return null; // Handle gracefully\n    }\n    throw error;\n  }\n}\n```\n\n### Invalid Data Format\n\n**Error**: `invalid_request`\n\n**Solutions**:\n\n1. Validate data before sending\n2. Check required fields\n3. Verify data types\n\n```javascript\n// Data validation\nfunction validateUserData(data) {\n  const errors = [];\n\n  if (!data.name || typeof data.name !== \"string\") {\n    errors.push(\"Name is required and must be a string\");\n  }\n\n  if (!data.email || !isValidEmail(data.email)) {\n    errors.push(\"Valid email is required\");\n  }\n\n  if (errors.length > 0) {\n    throw new Error(`Validation failed: ${errors.join(\", \")}`);\n  }\n}\n```\n\n## Network Issues\n\n### Connection Timeouts\n\n**Symptoms**:\n\n* Requests timing out\n* Network errors\n\n**Solutions**:\n\n1. Increase timeout values\n2. Implement retry logic\n3. Check network connectivity\n4. Use connection pooling\n\n```javascript\n// Configure timeouts\nconst client = new HackmambaClient({\n  apiKey: \"your-key\",\n  timeout: 30000, // 30 seconds\n  retries: 3,\n});\n```\n\n### SSL/TLS Issues\n\n**Symptoms**:\n\n* SSL certificate errors\n* Connection refused\n\n**Solutions**:\n\n1. Update certificates\n2. Check TLS version compatibility\n3. Verify certificate chain\n\n```bash\n# Test SSL connection\nopenssl s_client -connect api.hackmamba.com:443\n```\n\n## SDK Issues\n\n### SDK Not Found\n\n**Error**: Module not found\n\n**Solutions**:\n\n1. Install the correct SDK\n2. Check package.json dependencies\n3. Clear node\\_modules and reinstall\n\n```bash\n# Reinstall SDK\nnpm uninstall @hackmamba/sdk\nnpm install @hackmamba/sdk\n```\n\n### Version Compatibility\n\n**Symptoms**:\n\n* Deprecated warnings\n* Feature not available\n\n**Solutions**:\n\n1. Update to latest SDK version\n2. Check API version compatibility\n3. Review changelog for breaking changes\n\n```bash\n# Check SDK version\nnpm list @hackmamba/sdk\n\n# Update to latest\nnpm update @hackmamba/sdk\n```\n\n## Debugging Tips\n\n### Enable Debug Logging\n\n```javascript\n// Enable debug mode\nconst client = new HackmambaClient({\n  apiKey: \"your-key\",\n  debug: true, // Enable debug logging\n});\n```\n\n### Log Request/Response\n\n```javascript\n// Log all requests\nclient.on(\"request\", (req) => {\n  console.log(\"Request:\", req.method, req.url);\n});\n\nclient.on(\"response\", (res) => {\n  console.log(\"Response:\", res.status, res.data);\n});\n```\n\n### Use Request IDs\n\n```javascript\n// Include request ID for tracking\nconst response = await client.users.list({\n  requestId: \"my-unique-request-id\",\n});\n```\n\n## Getting Help\n\n### Check Status Page\n\nVisit our status page for service updates:\n\n* [Status Page](https://status.hackmamba.com)\n\n### Contact Support\n\nIf you're still experiencing issues:\n\n1. **Check Documentation**: Review relevant documentation\n2. **Search Issues**: Look for similar issues in our support forum\n3. **Contact Support**: Reach out with detailed information:\n   * Error messages\n   * Request/response logs\n   * Steps to reproduce\n   * SDK version and environment\n\n### Support Information\n\nWhen contacting support, include:\n\n* API key (masked: `sk_test_...`)\n* SDK version\n* Environment (sandbox/production)\n* Error messages\n* Request IDs\n* Timestamps\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"Testing\" href=\"/docs/testing\" description=\"Testing your integration\" />\n\n  <Card title=\"Support\" href=\"/docs/support\" description=\"Get help and support\" />\n</Cards>\n"}