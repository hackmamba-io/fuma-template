{"type":"route","meta":{"status":200,"headers":{"content-type":"text/markdown","x-next-cache-tags":"_N_T_/layout,_N_T_/llms.mdx/layout,_N_T_/llms.mdx/[[...slug]]/layout,_N_T_/llms.mdx/[[...slug]]/route,_N_T_/llms.mdx/developer-tools/testing"}},"body":"# Testing (/docs/developer-tools/testing)\n\n# Testing\n\nLearn how to test your integration with our API and webhooks.\n\n## Testing Environment\n\n### Sandbox Environment\n\nUse our sandbox environment for testing:\n\n* **Base URL**: `https://api-sandbox.hackmamba.com/v1`\n* **Test API Keys**: Start with `sk_test_`\n* **Test Data**: Separate from production data\n\n### Test API Keys\n\n```bash\n# Test API key (safe to use in code examples)\nexport HACKMAMBA_API_KEY=sk_test_1234567890abcdef\n```\n\n## API Testing\n\n### Manual Testing with cURL\n\nTest API endpoints manually:\n\n```bash\n# Test user creation\ncurl -X POST https://api-sandbox.hackmamba.com/v1/users \\\n  -H \"Authorization: Bearer sk_test_1234567890abcdef\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\"\n  }'\n\n# Test user retrieval\ncurl -H \"Authorization: Bearer sk_test_1234567890abcdef\" \\\n     https://api-sandbox.hackmamba.com/v1/users/user_123\n```\n\n### Automated Testing\n\nWrite automated tests for your integration:\n\n```javascript\n// Jest test example\nconst { HackmambaClient } = require(\"@hackmamba/sdk\");\n\ndescribe(\"Hackmamba Integration\", () => {\n  let client;\n\n  beforeAll(() => {\n    client = new HackmambaClient({\n      apiKey: process.env.HACKMAMBA_TEST_API_KEY,\n      environment: \"sandbox\",\n    });\n  });\n\n  test(\"should create a user\", async () => {\n    const user = await client.users.create({\n      name: \"Test User\",\n      email: \"test@example.com\",\n    });\n\n    expect(user.id).toBeDefined();\n    expect(user.name).toBe(\"Test User\");\n    expect(user.email).toBe(\"test@example.com\");\n  });\n\n  test(\"should retrieve a user\", async () => {\n    const user = await client.users.get(\"user_123\");\n    expect(user).toBeDefined();\n  });\n});\n```\n\n## Webhook Testing\n\n### Local Development Setup\n\nUse ngrok to test webhooks locally:\n\n```bash\n# Install ngrok\nnpm install -g ngrok\n\n# Start your local server\nnpm start\n\n# In another terminal, expose your local server\nngrok http 3000\n```\n\n### Webhook Test Endpoint\n\nCreate a test endpoint to receive webhooks:\n\n```javascript\napp.post(\"/webhooks/test\", (req, res) => {\n  console.log(\"Received webhook:\", req.body);\n\n  // Verify signature\n  const signature = req.headers[\"x-hackmamba-signature\"];\n  if (!verifyWebhookSignature(req.body, signature)) {\n    return res.status(400).send(\"Invalid signature\");\n  }\n\n  // Process the event\n  const event = req.body;\n  console.log(`Event type: ${event.type}`);\n  console.log(`Event data:`, event.data);\n\n  res.status(200).send(\"OK\");\n});\n```\n\n### Register Test Webhook\n\n```bash\ncurl -X POST https://api-sandbox.hackmamba.com/v1/webhooks \\\n  -H \"Authorization: Bearer sk_test_1234567890abcdef\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://abc123.ngrok.io/webhooks/test\",\n    \"events\": [\"user.created\", \"user.updated\"]\n  }'\n```\n\n### Trigger Test Events\n\n```bash\n# Create a test user to trigger webhook\ncurl -X POST https://api-sandbox.hackmamba.com/v1/users \\\n  -H \"Authorization: Bearer sk_test_1234567890abcdef\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Webhook Test User\",\n    \"email\": \"webhook-test@example.com\"\n  }'\n```\n\n## Test Data Management\n\n### Creating Test Data\n\n```javascript\nasync function createTestData() {\n  const testUsers = [\n    { name: \"Alice Johnson\", email: \"alice@test.com\" },\n    { name: \"Bob Smith\", email: \"bob@test.com\" },\n    { name: \"Carol Davis\", email: \"carol@test.com\" },\n  ];\n\n  for (const userData of testUsers) {\n    await client.users.create(userData);\n  }\n}\n```\n\n### Cleaning Up Test Data\n\n```javascript\nasync function cleanupTestData() {\n  const users = await client.users.list();\n  const testUsers = users.filter((user) => user.email.includes(\"@test.com\"));\n\n  for (const user of testUsers) {\n    await client.users.delete(user.id);\n  }\n}\n```\n\n## Error Testing\n\n### Testing Error Responses\n\n```javascript\ntest(\"should handle invalid API key\", async () => {\n  const invalidClient = new HackmambaClient({\n    apiKey: \"sk_invalid_key\",\n  });\n\n  await expect(invalidClient.users.list()).rejects.toThrow(\"Invalid API key\");\n});\n\ntest(\"should handle rate limiting\", async () => {\n  // Make many requests quickly\n  const promises = Array(10)\n    .fill()\n    .map(() => client.users.list());\n\n  const results = await Promise.allSettled(promises);\n  const rateLimited = results.filter(\n    (r) => r.status === \"rejected\" && r.reason.code === \"rate_limit_exceeded\"\n  );\n\n  expect(rateLimited.length).toBeGreaterThan(0);\n});\n```\n\n## Integration Testing\n\n### End-to-End Testing\n\n```javascript\ndescribe(\"Complete Integration Flow\", () => {\n  test(\"should handle user lifecycle\", async () => {\n    // 1. Create user\n    const user = await client.users.create({\n      name: \"Integration Test User\",\n      email: \"integration@test.com\",\n    });\n\n    expect(user.id).toBeDefined();\n\n    // 2. Update user\n    const updatedUser = await client.users.update(user.id, {\n      name: \"Updated Integration Test User\",\n    });\n\n    expect(updatedUser.name).toBe(\"Updated Integration Test User\");\n\n    // 3. Verify webhook was received\n    await waitForWebhookEvent(\"user.updated\", user.id);\n\n    // 4. Delete user\n    await client.users.delete(user.id);\n\n    // 5. Verify user is deleted\n    await expect(client.users.get(user.id)).rejects.toThrow(\"User not found\");\n  });\n});\n```\n\n## Performance Testing\n\n### Load Testing\n\n```javascript\nconst { performance } = require(\"perf_hooks\");\n\nasync function loadTest() {\n  const startTime = performance.now();\n\n  const promises = Array(100)\n    .fill()\n    .map(async (_, index) => {\n      return client.users.create({\n        name: `Load Test User ${index}`,\n        email: `load-test-${index}@example.com`,\n      });\n    });\n\n  const results = await Promise.all(promises);\n  const endTime = performance.now();\n\n  console.log(`Created ${results.length} users in ${endTime - startTime}ms`);\n  console.log(\n    `Average: ${(endTime - startTime) / results.length}ms per request`\n  );\n}\n```\n\n## Testing Checklist\n\n### Pre-Production Testing\n\n* [ ] Test all API endpoints\n* [ ] Verify webhook delivery\n* [ ] Test error handling\n* [ ] Validate rate limiting behavior\n* [ ] Test authentication flows\n* [ ] Verify data consistency\n* [ ] Test edge cases\n* [ ] Performance testing\n* [ ] Security testing\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"Webhooks\" href=\"/docs/webhooks\" description=\"Webhook setup and management\" />\n\n  <Card title=\"Troubleshooting\" href=\"/docs/troubleshooting\" description=\"Common issues and solutions\" />\n</Cards>\n"}