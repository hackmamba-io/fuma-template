{"type":"route","meta":{"status":200,"headers":{"content-type":"text/markdown","x-next-cache-tags":"_N_T_/layout,_N_T_/llms.mdx/layout,_N_T_/llms.mdx/[[...slug]]/layout,_N_T_/llms.mdx/[[...slug]]/route,_N_T_/llms.mdx/developer-tools/webhooks"}},"body":"# Webhooks (/docs/developer-tools/webhooks)\n\n# Webhooks\n\nSet up webhooks to receive real-time notifications about events in your account.\n\n## Overview\n\nWebhooks allow you to receive instant notifications when events occur in your account, enabling you to build real-time integrations and keep your systems in sync.\n\n## Supported Events\n\n### User Events\n\n* `user.created` - A new user is created\n* `user.updated` - User information is updated\n* `user.deleted` - A user is deleted\n\n### Project Events\n\n* `project.created` - A new project is created\n* `project.updated` - Project settings are updated\n* `project.deleted` - A project is deleted\n\n### Payment Events\n\n* `payment.succeeded` - A payment is completed successfully\n* `payment.failed` - A payment fails\n* `payment.refunded` - A payment is refunded\n\n## Setting Up Webhooks\n\n### 1. Create a Webhook Endpoint\n\nFirst, create an endpoint in your application to receive webhook events:\n\n```javascript\n// Express.js example\napp.post(\"/webhooks/hackmamba\", (req, res) => {\n  const event = req.body;\n\n  // Verify the webhook signature\n  const signature = req.headers[\"x-hackmamba-signature\"];\n  if (!verifyWebhookSignature(req.body, signature)) {\n    return res.status(400).send(\"Invalid signature\");\n  }\n\n  // Process the event\n  handleWebhookEvent(event);\n\n  res.status(200).send(\"OK\");\n});\n```\n\n### 2. Register Your Webhook\n\nRegister your webhook endpoint through the API:\n\n```bash\ncurl -X POST https://api.hackmamba.com/v1/webhooks \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://your-app.com/webhooks/hackmamba\",\n    \"events\": [\"user.created\", \"user.updated\"],\n    \"secret\": \"your-webhook-secret\"\n  }'\n```\n\n### 3. Handle Events\n\nProcess incoming webhook events:\n\n```javascript\nfunction handleWebhookEvent(event) {\n  switch (event.type) {\n    case \"user.created\":\n      console.log(\"New user:\", event.data);\n      // Sync user to your database\n      break;\n\n    case \"user.updated\":\n      console.log(\"Updated user:\", event.data);\n      // Update user in your database\n      break;\n\n    case \"payment.succeeded\":\n      console.log(\"Payment succeeded:\", event.data);\n      // Activate user subscription\n      break;\n\n    default:\n      console.log(\"Unknown event type:\", event.type);\n  }\n}\n```\n\n## Webhook Security\n\n### Signature Verification\n\nAlways verify webhook signatures to ensure events are from Hackmamba:\n\n```javascript\nconst crypto = require(\"crypto\");\n\nfunction verifyWebhookSignature(payload, signature, secret) {\n  const expectedSignature = crypto\n    .createHmac(\"sha256\", secret)\n    .update(payload)\n    .digest(\"hex\");\n\n  return signature === `sha256=${expectedSignature}`;\n}\n```\n\n### HTTPS Only\n\nWebhook endpoints must use HTTPS in production. We will not send webhooks to HTTP endpoints.\n\n## Event Structure\n\nAll webhook events follow this structure:\n\n```json\n{\n  \"id\": \"evt_1234567890\",\n  \"type\": \"user.created\",\n  \"created\": 1640995200,\n  \"data\": {\n    \"object\": \"user\",\n    \"id\": \"user_123\",\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n  },\n  \"livemode\": false,\n  \"pending_webhooks\": 1,\n  \"request\": {\n    \"id\": \"req_1234567890\"\n  }\n}\n```\n\n## Retry Logic\n\nIf your webhook endpoint returns a non-2xx status code, we will retry the webhook:\n\n* **Retry attempts**: Up to 3 times\n* **Retry intervals**: 1 minute, 5 minutes, 15 minutes\n* **Timeout**: 30 seconds per attempt\n\n## Testing Webhooks\n\n### Using ngrok for Local Development\n\n```bash\n# Install ngrok\nnpm install -g ngrok\n\n# Expose your local server\nngrok http 3000\n\n# Use the ngrok URL for webhook registration\ncurl -X POST https://api.hackmamba.com/v1/webhooks \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://abc123.ngrok.io/webhooks/hackmamba\",\n    \"events\": [\"user.created\"]\n  }'\n```\n\n### Webhook Testing Tool\n\nUse our webhook testing tool to send test events:\n\n```bash\ncurl -X POST https://api.hackmamba.com/v1/webhooks/wh_123/test \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n## Managing Webhooks\n\n### List Webhooks\n\n```bash\ncurl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     https://api.hackmamba.com/v1/webhooks\n```\n\n### Update Webhook\n\n```bash\ncurl -X PUT https://api.hackmamba.com/v1/webhooks/wh_123 \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"events\": [\"user.created\", \"user.updated\", \"user.deleted\"]\n  }'\n```\n\n### Delete Webhook\n\n```bash\ncurl -X DELETE https://api.hackmamba.com/v1/webhooks/wh_123 \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n## Best Practices\n\n### Idempotency\n\nMake your webhook handlers idempotent to handle duplicate events:\n\n```javascript\nconst processedEvents = new Set();\n\nfunction handleWebhookEvent(event) {\n  if (processedEvents.has(event.id)) {\n    return; // Already processed\n  }\n\n  // Process event\n  processEvent(event);\n\n  // Mark as processed\n  processedEvents.add(event.id);\n}\n```\n\n### Error Handling\n\nImplement proper error handling and logging:\n\n```javascript\nfunction handleWebhookEvent(event) {\n  try {\n    processEvent(event);\n    console.log(`Successfully processed event ${event.id}`);\n  } catch (error) {\n    console.error(`Failed to process event ${event.id}:`, error);\n    // Don't throw - return 200 to prevent retries\n  }\n}\n```\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"SDKs\" href=\"/docs/sdks\" description=\"Official SDKs with webhook support\" />\n\n  <Card title=\"Testing\" href=\"/docs/testing\" description=\"Testing your webhook integration\" />\n</Cards>\n"}