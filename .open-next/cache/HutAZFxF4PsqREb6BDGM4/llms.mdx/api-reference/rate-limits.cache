{"type":"route","meta":{"status":200,"headers":{"content-type":"text/markdown","x-next-cache-tags":"_N_T_/layout,_N_T_/llms.mdx/layout,_N_T_/llms.mdx/[[...slug]]/layout,_N_T_/llms.mdx/[[...slug]]/route,_N_T_/llms.mdx/api-reference/rate-limits"}},"body":"# Rate Limits (/docs/api-reference/rate-limits)\n\n# Rate Limits\n\nLearn about API rate limits and how to work within them effectively.\n\n## Overview\n\nRate limiting helps ensure fair usage and system stability. All API endpoints are subject to rate limits based on your plan.\n\n## Rate Limit Tiers\n\n### Free Tier\n\n* **Requests per hour**: 100\n* **Burst limit**: 10 requests per minute\n* **Concurrent requests**: 5\n\n### Pro Tier\n\n* **Requests per hour**: 1,000\n* **Burst limit**: 50 requests per minute\n* **Concurrent requests**: 20\n\n### Enterprise Tier\n\n* **Requests per hour**: Custom (contact sales)\n* **Burst limit**: Custom\n* **Concurrent requests**: Custom\n\n## Rate Limit Headers\n\nEvery API response includes rate limit information:\n\n```http\nX-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1640995200\nX-RateLimit-Retry-After: 3600\n```\n\n### Header Descriptions\n\n* `X-RateLimit-Limit`: Maximum requests allowed per hour\n* `X-RateLimit-Remaining`: Requests remaining in current window\n* `X-RateLimit-Reset`: Unix timestamp when the limit resets\n* `X-RateLimit-Retry-After`: Seconds to wait before retrying (only on 429)\n\n## Rate Limit Responses\n\n### 429 Too Many Requests\n\nWhen you exceed the rate limit, you'll receive a 429 status code:\n\n```json\n{\n  \"error\": {\n    \"type\": \"rate_limit_error\",\n    \"code\": \"rate_limit_exceeded\",\n    \"message\": \"Rate limit exceeded. Try again in 3600 seconds.\",\n    \"retry_after\": 3600\n  }\n}\n```\n\n## Best Practices\n\n### Implement Exponential Backoff\n\n```javascript\nasync function makeRequestWithRetry(url, options, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      const response = await fetch(url, options);\n\n      if (response.status === 429) {\n        const retryAfter = response.headers.get(\"X-RateLimit-Retry-After\");\n        const delay = Math.pow(2, i) * 1000; // Exponential backoff\n\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        continue;\n      }\n\n      return response;\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n    }\n  }\n}\n```\n\n### Monitor Rate Limit Usage\n\n```javascript\nfunction checkRateLimit(response) {\n  const limit = response.headers.get(\"X-RateLimit-Limit\");\n  const remaining = response.headers.get(\"X-RateLimit-Remaining\");\n  const reset = response.headers.get(\"X-RateLimit-Reset\");\n\n  console.log(`Rate limit: ${remaining}/${limit} remaining`);\n  console.log(`Resets at: ${new Date(reset * 1000)}`);\n\n  // Alert when approaching limit\n  if (remaining < limit * 0.1) {\n    console.warn(\"Rate limit nearly exceeded!\");\n  }\n}\n```\n\n### Batch Requests When Possible\n\nInstead of making multiple individual requests:\n\n```javascript\n// ❌ Multiple requests\nconst user1 = await api.getUser(1);\nconst user2 = await api.getUser(2);\nconst user3 = await api.getUser(3);\n\n// ✅ Single batch request\nconst users = await api.getUsers([1, 2, 3]);\n```\n\n## Rate Limit by Endpoint\n\nDifferent endpoints may have different rate limits:\n\n| Endpoint    | Free Tier | Pro Tier   | Enterprise |\n| ----------- | --------- | ---------- | ---------- |\n| `/users`    | 100/hour  | 1,000/hour | Custom     |\n| `/projects` | 50/hour   | 500/hour   | Custom     |\n| `/webhooks` | 20/hour   | 200/hour   | Custom     |\n\n## Handling Rate Limits in SDKs\n\nOur official SDKs handle rate limiting automatically:\n\n```javascript\n// SDK automatically handles rate limiting\nconst users = await sdk.users.list();\n```\n\n## Upgrading Your Plan\n\nIf you consistently hit rate limits, consider upgrading:\n\n1. **Analyze your usage** patterns\n2. **Identify bottlenecks** in your application\n3. **Optimize requests** where possible\n4. **Contact support** for custom limits\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"Authentication\" href=\"/docs/authentication\" description=\"API authentication guide\" />\n\n  <Card title=\"SDKs\" href=\"/docs/sdks\" description=\"Official SDKs with rate limit handling\" />\n</Cards>\n"}