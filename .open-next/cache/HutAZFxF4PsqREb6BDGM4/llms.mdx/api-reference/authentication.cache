{"type":"route","meta":{"status":200,"headers":{"content-type":"text/markdown","x-next-cache-tags":"_N_T_/layout,_N_T_/llms.mdx/layout,_N_T_/llms.mdx/[[...slug]]/layout,_N_T_/llms.mdx/[[...slug]]/route,_N_T_/llms.mdx/api-reference/authentication"}},"body":"# Authentication (/docs/api-reference/authentication)\n\n# Authentication\n\nLearn how to authenticate with our API securely and effectively.\n\n## Authentication Methods\n\nWe support multiple authentication methods to fit different use cases:\n\n### API Keys\n\nAPI keys are the simplest way to authenticate for server-to-server communication.\n\n#### Creating an API Key\n\n1. Log in to your account dashboard\n2. Navigate to \"API Keys\" section\n3. Click \"Create New Key\"\n4. Copy and securely store your key\n\n#### Using API Keys\n\nInclude your API key in the `Authorization` header:\n\n```bash\ncurl -H \"Authorization: Bearer sk_live_1234567890abcdef\" \\\n     https://api.example.com/v1/users\n```\n\n### OAuth 2.0\n\nOAuth 2.0 is recommended for applications that need to access user data.\n\n#### OAuth Flow\n\n1. **Authorization Request**: Redirect users to our authorization endpoint\n2. **User Consent**: Users grant permission to your application\n3. **Authorization Code**: Receive an authorization code\n4. **Token Exchange**: Exchange the code for an access token\n5. **API Access**: Use the access token to make API requests\n\n#### Authorization URL\n\n```\nhttps://auth.example.com/oauth/authorize?\n  client_id=your_client_id&\n  redirect_uri=your_redirect_uri&\n  response_type=code&\n  scope=read write\n```\n\n#### Token Exchange\n\n```bash\ncurl -X POST https://auth.example.com/oauth/token \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"grant_type=authorization_code\" \\\n  -d \"code=AUTHORIZATION_CODE\" \\\n  -d \"redirect_uri=your_redirect_uri\" \\\n  -d \"client_id=your_client_id\" \\\n  -d \"client_secret=your_client_secret\"\n```\n\n### JWT Tokens\n\nFor stateless authentication, we support JSON Web Tokens (JWT).\n\n#### JWT Structure\n\n```json\n{\n  \"header\": {\n    \"alg\": \"HS256\",\n    \"typ\": \"JWT\"\n  },\n  \"payload\": {\n    \"sub\": \"user_123\",\n    \"iat\": 1640995200,\n    \"exp\": 1641081600,\n    \"scope\": \"read write\"\n  }\n}\n```\n\n## Security Best Practices\n\n### API Key Security\n\n* **Never expose API keys** in client-side code\n* **Use environment variables** to store keys\n* **Rotate keys regularly** for enhanced security\n* **Use different keys** for different environments\n\n### OAuth Security\n\n* **Use HTTPS** for all OAuth flows\n* **Validate state parameters** to prevent CSRF attacks\n* **Store tokens securely** on the server side\n* **Implement token refresh** for long-lived applications\n\n### General Security\n\n* **Use HTTPS** for all API requests\n* **Validate all inputs** before making requests\n* **Implement rate limiting** on your end\n* **Monitor for suspicious activity**\n\n## Error Handling\n\n### Authentication Errors\n\n```json\n{\n  \"error\": {\n    \"type\": \"authentication_error\",\n    \"code\": \"invalid_api_key\",\n    \"message\": \"The API key provided is invalid\"\n  }\n}\n```\n\n### Common Error Codes\n\n* `invalid_api_key`: API key is missing or invalid\n* `expired_token`: Access token has expired\n* `insufficient_scope`: Token doesn't have required permissions\n* `rate_limit_exceeded`: Too many requests made\n\n## Testing Authentication\n\n### Test API Keys\n\nUse our test API keys for development:\n\n```bash\n# Test key (sandbox environment)\nAuthorization: Bearer sk_test_1234567890abcdef\n\n# Live key (production environment)\nAuthorization: Bearer sk_live_1234567890abcdef\n```\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"SDKs\" href=\"/docs/sdks\" description=\"Official SDKs with built-in authentication\" />\n\n  <Card title=\"Rate Limits\" href=\"/docs/rate-limits\" description=\"Understanding API rate limits\" />\n</Cards>\n"}