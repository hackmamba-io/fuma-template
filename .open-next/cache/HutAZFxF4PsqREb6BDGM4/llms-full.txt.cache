{"type":"route","meta":{"status":200,"headers":{"content-type":"text/plain;charset=UTF-8","x-next-cache-tags":"_N_T_/layout,_N_T_/llms-full.txt/layout,_N_T_/llms-full.txt/route,_N_T_/llms-full.txt"}},"body":"# Hackmamba Docs (/docs)\n\nHackmamba delivers comprehensive documentation solutions for modern software projects, helping teams build better products through clear, accessible documentation.\n\n<Cards>\n  <Card title=\"🚀 Start Building\" href=\"/docs/overview\" description=\"Get up and running with our documentation template in minutes\" />\n</Cards>\n\n***\n\n## Documentation Solutions\n\n<Cards>\n  <Card title=\"Getting Started\" href=\"/docs/overview\" description=\"Learn how to set up and customize your documentation project with our comprehensive guides.\" />\n\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation with examples, integration guides, and best practices.\" />\n</Cards>\n\n## Development Resources\n\n<Cards>\n  <Card title=\"Quick Start Guide\" href=\"/docs/overview\" description=\"Get your documentation project up and running in under 5 minutes with our step-by-step guide.\" />\n\n  <Card title=\"Customization\" href=\"/docs/customization\" description=\"Learn how to customize the template to match your brand and requirements.\" />\n</Cards>\n\n## Explore Developer Tools & Resources\n\n### Getting Started\n\n<Cards>\n  <Card title=\"Overview\" href=\"/docs/overview\" description=\"Complete introduction to the documentation template\" />\n\n  <Card title=\"Installation\" href=\"/docs/installation\" description=\"Step-by-step installation and setup guide\" />\n\n  <Card title=\"Configuration\" href=\"/docs/configuration\" description=\"Learn how to configure your documentation project\" />\n\n  <Card title=\"Customization\" href=\"/docs/customization\" description=\"Customize the template to match your brand\" />\n</Cards>\n\n### API Documentation\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation with examples\" />\n\n  <Card title=\"Authentication\" href=\"/docs/authentication\" description=\"API authentication and security guide\" />\n\n  <Card title=\"Rate Limits\" href=\"/docs/rate-limits\" description=\"Understanding API rate limits and best practices\" />\n</Cards>\n\n### Developer Tools\n\n<Cards>\n  <Card title=\"SDKs\" href=\"/docs/sdks\" description=\"Official SDKs and client libraries\" />\n\n  <Card title=\"Webhooks\" href=\"/docs/webhooks\" description=\"Set up and manage webhooks\" />\n\n  <Card title=\"Testing\" href=\"/docs/testing\" description=\"Testing your integration\" />\n\n  <Card title=\"Troubleshooting\" href=\"/docs/troubleshooting\" description=\"Common issues and solutions\" />\n</Cards>\n\n### Community & Support\n\n<Cards>\n  <Card title=\"Community\" href=\"/docs/community\" description=\"Join our developer community\" />\n\n  <Card title=\"Support\" href=\"/docs/support\" description=\"Get help and support\" />\n\n  <Card title=\"Contributing\" href=\"/docs/contributing\" description=\"Contribute to the project\" />\n</Cards>\n\n***\n\n## Join the Hackmamba Community\n\n💡 Connect with developers and get the support you need\n\n<Cards>\n  <Card title=\"Join Discord\" href=\"/docs/community\" description=\"Connect with other developers in our Discord community\" />\n\n  <Card title=\"GitHub Discussions\" href=\"/docs/community\" description=\"Ask questions and share ideas on GitHub\" />\n\n  <Card title=\"Documentation Feedback\" href=\"/docs/feedback\" description=\"Help us improve our documentation\" />\n\n  <Card title=\"Feature Requests\" href=\"/docs/feature-requests\" description=\"Suggest new features and improvements\" />\n</Cards>\n\n***\n\nNew to Hackmamba? Start with the [Overview](/docs/overview) for a complete introduction to our documentation solutions.\n\n\n# Overview (/docs/overview)\n\nWelcome to Hackmamba, your comprehensive documentation solution for modern software projects.\n\n## Why Hackmamba?\n\nHackmamba addresses the key challenges facing documentation teams:\n\n* **Complex Setup**: Traditional documentation tools require extensive configuration\n* **Poor User Experience**: Many documentation sites are difficult to navigate\n* **Maintenance Overhead**: Keeping documentation up-to-date is time-consuming\n* **Brand Consistency**: Ensuring documentation matches your brand identity\n\n## Core Principles\n\n### 1. Developer-First\n\nHackmamba is built from the ground up for developers, recognizing that great documentation starts with great developer experience.\n\n### 2. Modern Standards\n\nEvery feature follows modern web standards and best practices for performance and accessibility.\n\n### 3. Customizable\n\nHackmamba provides extensive customization options while maintaining sensible defaults.\n\n## Key Features\n\n### Documentation Template\n\n* Pre-built components and layouts\n* Responsive design that works on all devices\n* SEO-optimized structure\n* Fast loading times\n\n### Developer Experience\n\n* Markdown-based content creation\n* Live preview during development\n* Easy deployment options\n* Version control integration\n\n### Customization\n\n* Brand colors and styling\n* Custom components\n* Flexible navigation structure\n* Multiple layout options\n\n## Getting Started\n\n<Cards>\n  <Card title=\"🚀 Start Building\" href=\"/docs/installation\" description=\"Set up your documentation project\" />\n\n  <Card title=\"Learn More\" href=\"/docs/configuration\" description=\"Configure your documentation\" />\n\n  <Card title=\"Join Community\" href=\"/docs/community\" description=\"Connect with other users\" />\n</Cards>\n\n\n# Overview (/docs/api-reference/api-overview)\n\n## Authentication\n\nAll API requests require authentication using API keys or OAuth tokens.\n\n### API Key Authentication\n\nInclude your API key in the request header:\n\n```bash\ncurl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     https://api.example.com/v1/endpoint\n```\n\n### OAuth Authentication\n\nFor OAuth authentication, follow the OAuth 2.0 flow:\n\n1. Redirect users to the authorization endpoint\n2. Handle the callback with the authorization code\n3. Exchange the code for an access token\n4. Use the access token in API requests\n\n## Base URL\n\nAll API requests should be made to:\n\n```\nhttps://api.example.com/v1\n```\n\n## Rate Limits\n\nAPI requests are rate limited to ensure fair usage:\n\n* **Free Tier**: 100 requests per hour\n* **Pro Tier**: 1,000 requests per hour\n* **Enterprise**: Custom limits\n\nRate limit headers are included in all responses:\n\n```\nX-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1640995200\n```\n\n## Endpoints\n\n### Users\n\n#### Get User Profile\n\n```http\nGET /users/{user_id}\n```\n\n**Response:**\n\n```json\n{\n  \"id\": \"user_123\",\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"created_at\": \"2023-01-01T00:00:00Z\"\n}\n```\n\n#### Update User Profile\n\n```http\nPUT /users/{user_id}\n```\n\n**Request Body:**\n\n```json\n{\n  \"name\": \"John Smith\",\n  \"email\": \"johnsmith@example.com\"\n}\n```\n\n### Projects\n\n#### List Projects\n\n```http\nGET /projects\n```\n\n**Query Parameters:**\n\n* `limit` (optional): Number of results per page (default: 20)\n* `offset` (optional): Number of results to skip (default: 0)\n\n## Error Handling\n\nThe API uses standard HTTP status codes and returns error details in JSON format:\n\n```json\n{\n  \"error\": {\n    \"code\": \"INVALID_REQUEST\",\n    \"message\": \"The request is invalid\",\n    \"details\": {\n      \"field\": \"email\",\n      \"reason\": \"Invalid email format\"\n    }\n  }\n}\n```\n\n## SDKs\n\nWe provide official SDKs for popular programming languages:\n\n<Cards>\n  <Card title=\"JavaScript SDK\" href=\"/docs/sdks\" description=\"Official JavaScript/Node.js SDK\" />\n\n  <Card title=\"Python SDK\" href=\"/docs/sdks\" description=\"Official Python SDK\" />\n\n  <Card title=\"Authentication Guide\" href=\"/docs/authentication\" description=\"Detailed authentication guide\" />\n</Cards>\n\n\n# Authentication (/docs/api-reference/authentication)\n\n# Authentication\n\nLearn how to authenticate with our API securely and effectively.\n\n## Authentication Methods\n\nWe support multiple authentication methods to fit different use cases:\n\n### API Keys\n\nAPI keys are the simplest way to authenticate for server-to-server communication.\n\n#### Creating an API Key\n\n1. Log in to your account dashboard\n2. Navigate to \"API Keys\" section\n3. Click \"Create New Key\"\n4. Copy and securely store your key\n\n#### Using API Keys\n\nInclude your API key in the `Authorization` header:\n\n```bash\ncurl -H \"Authorization: Bearer sk_live_1234567890abcdef\" \\\n     https://api.example.com/v1/users\n```\n\n### OAuth 2.0\n\nOAuth 2.0 is recommended for applications that need to access user data.\n\n#### OAuth Flow\n\n1. **Authorization Request**: Redirect users to our authorization endpoint\n2. **User Consent**: Users grant permission to your application\n3. **Authorization Code**: Receive an authorization code\n4. **Token Exchange**: Exchange the code for an access token\n5. **API Access**: Use the access token to make API requests\n\n#### Authorization URL\n\n```\nhttps://auth.example.com/oauth/authorize?\n  client_id=your_client_id&\n  redirect_uri=your_redirect_uri&\n  response_type=code&\n  scope=read write\n```\n\n#### Token Exchange\n\n```bash\ncurl -X POST https://auth.example.com/oauth/token \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"grant_type=authorization_code\" \\\n  -d \"code=AUTHORIZATION_CODE\" \\\n  -d \"redirect_uri=your_redirect_uri\" \\\n  -d \"client_id=your_client_id\" \\\n  -d \"client_secret=your_client_secret\"\n```\n\n### JWT Tokens\n\nFor stateless authentication, we support JSON Web Tokens (JWT).\n\n#### JWT Structure\n\n```json\n{\n  \"header\": {\n    \"alg\": \"HS256\",\n    \"typ\": \"JWT\"\n  },\n  \"payload\": {\n    \"sub\": \"user_123\",\n    \"iat\": 1640995200,\n    \"exp\": 1641081600,\n    \"scope\": \"read write\"\n  }\n}\n```\n\n## Security Best Practices\n\n### API Key Security\n\n* **Never expose API keys** in client-side code\n* **Use environment variables** to store keys\n* **Rotate keys regularly** for enhanced security\n* **Use different keys** for different environments\n\n### OAuth Security\n\n* **Use HTTPS** for all OAuth flows\n* **Validate state parameters** to prevent CSRF attacks\n* **Store tokens securely** on the server side\n* **Implement token refresh** for long-lived applications\n\n### General Security\n\n* **Use HTTPS** for all API requests\n* **Validate all inputs** before making requests\n* **Implement rate limiting** on your end\n* **Monitor for suspicious activity**\n\n## Error Handling\n\n### Authentication Errors\n\n```json\n{\n  \"error\": {\n    \"type\": \"authentication_error\",\n    \"code\": \"invalid_api_key\",\n    \"message\": \"The API key provided is invalid\"\n  }\n}\n```\n\n### Common Error Codes\n\n* `invalid_api_key`: API key is missing or invalid\n* `expired_token`: Access token has expired\n* `insufficient_scope`: Token doesn't have required permissions\n* `rate_limit_exceeded`: Too many requests made\n\n## Testing Authentication\n\n### Test API Keys\n\nUse our test API keys for development:\n\n```bash\n# Test key (sandbox environment)\nAuthorization: Bearer sk_test_1234567890abcdef\n\n# Live key (production environment)\nAuthorization: Bearer sk_live_1234567890abcdef\n```\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"SDKs\" href=\"/docs/sdks\" description=\"Official SDKs with built-in authentication\" />\n\n  <Card title=\"Rate Limits\" href=\"/docs/rate-limits\" description=\"Understanding API rate limits\" />\n</Cards>\n\n\n# Rate Limits (/docs/api-reference/rate-limits)\n\n# Rate Limits\n\nLearn about API rate limits and how to work within them effectively.\n\n## Overview\n\nRate limiting helps ensure fair usage and system stability. All API endpoints are subject to rate limits based on your plan.\n\n## Rate Limit Tiers\n\n### Free Tier\n\n* **Requests per hour**: 100\n* **Burst limit**: 10 requests per minute\n* **Concurrent requests**: 5\n\n### Pro Tier\n\n* **Requests per hour**: 1,000\n* **Burst limit**: 50 requests per minute\n* **Concurrent requests**: 20\n\n### Enterprise Tier\n\n* **Requests per hour**: Custom (contact sales)\n* **Burst limit**: Custom\n* **Concurrent requests**: Custom\n\n## Rate Limit Headers\n\nEvery API response includes rate limit information:\n\n```http\nX-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1640995200\nX-RateLimit-Retry-After: 3600\n```\n\n### Header Descriptions\n\n* `X-RateLimit-Limit`: Maximum requests allowed per hour\n* `X-RateLimit-Remaining`: Requests remaining in current window\n* `X-RateLimit-Reset`: Unix timestamp when the limit resets\n* `X-RateLimit-Retry-After`: Seconds to wait before retrying (only on 429)\n\n## Rate Limit Responses\n\n### 429 Too Many Requests\n\nWhen you exceed the rate limit, you'll receive a 429 status code:\n\n```json\n{\n  \"error\": {\n    \"type\": \"rate_limit_error\",\n    \"code\": \"rate_limit_exceeded\",\n    \"message\": \"Rate limit exceeded. Try again in 3600 seconds.\",\n    \"retry_after\": 3600\n  }\n}\n```\n\n## Best Practices\n\n### Implement Exponential Backoff\n\n```javascript\nasync function makeRequestWithRetry(url, options, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      const response = await fetch(url, options);\n\n      if (response.status === 429) {\n        const retryAfter = response.headers.get(\"X-RateLimit-Retry-After\");\n        const delay = Math.pow(2, i) * 1000; // Exponential backoff\n\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        continue;\n      }\n\n      return response;\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n    }\n  }\n}\n```\n\n### Monitor Rate Limit Usage\n\n```javascript\nfunction checkRateLimit(response) {\n  const limit = response.headers.get(\"X-RateLimit-Limit\");\n  const remaining = response.headers.get(\"X-RateLimit-Remaining\");\n  const reset = response.headers.get(\"X-RateLimit-Reset\");\n\n  console.log(`Rate limit: ${remaining}/${limit} remaining`);\n  console.log(`Resets at: ${new Date(reset * 1000)}`);\n\n  // Alert when approaching limit\n  if (remaining < limit * 0.1) {\n    console.warn(\"Rate limit nearly exceeded!\");\n  }\n}\n```\n\n### Batch Requests When Possible\n\nInstead of making multiple individual requests:\n\n```javascript\n// ❌ Multiple requests\nconst user1 = await api.getUser(1);\nconst user2 = await api.getUser(2);\nconst user3 = await api.getUser(3);\n\n// ✅ Single batch request\nconst users = await api.getUsers([1, 2, 3]);\n```\n\n## Rate Limit by Endpoint\n\nDifferent endpoints may have different rate limits:\n\n| Endpoint    | Free Tier | Pro Tier   | Enterprise |\n| ----------- | --------- | ---------- | ---------- |\n| `/users`    | 100/hour  | 1,000/hour | Custom     |\n| `/projects` | 50/hour   | 500/hour   | Custom     |\n| `/webhooks` | 20/hour   | 200/hour   | Custom     |\n\n## Handling Rate Limits in SDKs\n\nOur official SDKs handle rate limiting automatically:\n\n```javascript\n// SDK automatically handles rate limiting\nconst users = await sdk.users.list();\n```\n\n## Upgrading Your Plan\n\nIf you consistently hit rate limits, consider upgrading:\n\n1. **Analyze your usage** patterns\n2. **Identify bottlenecks** in your application\n3. **Optimize requests** where possible\n4. **Contact support** for custom limits\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"Authentication\" href=\"/docs/authentication\" description=\"API authentication guide\" />\n\n  <Card title=\"SDKs\" href=\"/docs/sdks\" description=\"Official SDKs with rate limit handling\" />\n</Cards>\n\n\n# Community (/docs/community-support/community)\n\nJoin our growing community of developers and get the support you need.\n\n## Join Our Community\n\n### Discord Server\n\nConnect with other developers in real-time:\n\n* **Discord**: [Join our Discord](https://discord.gg/hackmamba)\n* **Channels**:\n  * `#general` - General discussions\n  * `#api-help` - API questions and help\n  * `#integrations` - Share your integrations\n  * `#announcements` - Product updates\n\n### GitHub Discussions\n\nAsk questions and share ideas on GitHub:\n\n* **Repository**: [github.com/hackmamba/community](https://github.com/hackmamba/community)\n* **Categories**:\n  * Q\\&A - Ask questions\n  * Ideas - Feature requests\n  * Show and Tell - Share your projects\n  * General - Community discussions\n\n### Stack Overflow\n\nGet help from the broader developer community:\n\n* **Tag**: `hackmamba`\n* **Search**: [Stack Overflow - Hackmamba](https://stackoverflow.com/questions/tagged/hackmamba)\n\n## Community Guidelines\n\n### Be Respectful\n\n* Treat everyone with respect and kindness\n* Use inclusive language\n* Be patient with newcomers\n\n### Stay On Topic\n\n* Keep discussions relevant to Hackmamba\n* Use appropriate channels for different topics\n* Search before asking questions\n\n### Share Knowledge\n\n* Help others when you can\n* Share useful resources and examples\n* Contribute to documentation improvements\n\n## Getting Help\n\n### Before Asking\n\n1. **Search existing discussions** for similar questions\n2. **Check the documentation** for answers\n3. **Try the troubleshooting guide** for common issues\n4. **Test in sandbox** environment first\n\n### When Asking for Help\n\nInclude the following information:\n\n* **What you're trying to do**\n* **What you've tried so far**\n* **Error messages** (if any)\n* **Code examples** (sanitized)\n* **Environment details** (SDK version, etc.)\n\n### Example Help Request\n\n````\nSubject: API returning 401 error when creating users\n\nI'm trying to create users using the JavaScript SDK but getting a 401 error.\n\nEnvironment:\n- SDK: @hackmamba/sdk v1.2.3\n- Environment: sandbox\n- Node.js: v18.0.0\n\nCode:\n```javascript\nconst client = new HackmambaClient({\n  apiKey: process.env.HACKMAMBA_API_KEY\n});\n\nconst user = await client.users.create({\n  name: 'Test User',\n  email: 'test@example.com'\n});\n````\n\nError:\n\n```\nError: Invalid API key\n```\n\nI've verified my API key is correct and starts with `sk_test_`. Any ideas?\n\n```\n\n## Community Projects\n\n### Open Source Integrations\n\nCheck out community-built integrations:\n\n- **WordPress Plugin** - [github.com/user/hackmamba-wordpress](https://github.com/user/hackmamba-wordpress)\n- **Shopify App** - [github.com/user/hackmamba-shopify](https://github.com/user/hackmamba-shopify)\n- **Laravel Package** - [github.com/user/hackmamba-laravel](https://github.com/user/hackmamba-laravel)\n\n### Contributing\n\nWant to contribute to the community?\n\n1. **Share your integration** in GitHub Discussions\n2. **Write tutorials** and guides\n3. **Help answer questions** in Discord\n4. **Improve documentation** with pull requests\n\n## Events and Meetups\n\n### Virtual Meetups\n\nJoin our monthly virtual meetups:\n\n- **When**: First Tuesday of every month\n- **Time**: 2:00 PM EST\n- **Topics**: API updates, integrations, Q&A\n- **Registration**: [meetup.com/hackmamba](https://meetup.com/hackmamba)\n\n### Hackathons\n\nParticipate in Hackmamba-sponsored hackathons:\n\n- **Annual Hackathon**: Build with Hackmamba\n- **Prize Pool**: $10,000+ in prizes\n- **Registration**: [hackmamba.com/hackathon](https://hackmamba.com/hackathon)\n\n## Success Stories\n\n### Featured Integrations\n\nRead about successful integrations:\n\n- **E-commerce Platform**: How Company X integrated Hackmamba for user management\n- **SaaS Application**: Building a subscription service with Hackmamba\n- **Mobile App**: Real-time notifications with webhooks\n\n### Developer Spotlights\n\nMeet the developers building with Hackmamba:\n\n- **Sarah Chen** - Built a marketplace integration\n- **Mike Rodriguez** - Created a CRM integration\n- **Alex Kim** - Developed a payment processing system\n\n## Stay Updated\n\n### Newsletter\n\nSubscribe to our developer newsletter:\n\n- **Frequency**: Weekly\n- **Content**: API updates, new features, community highlights\n- **Subscribe**: [hackmamba.com/newsletter](https://hackmamba.com/newsletter)\n\n### Social Media\n\nFollow us for updates:\n\n- **Twitter**: [@hackmamba](https://twitter.com/hackmamba)\n- **LinkedIn**: [Hackmamba](https://linkedin.com/company/hackmamba)\n- **YouTube**: [Hackmamba Channel](https://youtube.com/hackmamba)\n\n<Cards>\n  <Card title=\"Support\" href=\"/docs/support\" description=\"Get technical support\" />\n  <Card title=\"Contributing\" href=\"/docs/contributing\" description=\"Contribute to the project\" />\n  <Card title=\"Feedback\" href=\"/docs/feedback\" description=\"Share your feedback\" />\n</Cards>\n```\n\n\n# Contributing (/docs/community-support/contributing)\n\nHelp improve Hackmamba by contributing to our project and community.\n\n## Ways to Contribute\n\n### Code Contributions\n\n#### Bug Fixes\n\n* **Report bugs** through GitHub Issues\n* **Fix bugs** and submit pull requests\n* **Test fixes** thoroughly before submitting\n\n#### Feature Development\n\n* **Propose features** through GitHub Discussions\n* **Implement features** following our guidelines\n* **Write tests** for new functionality\n\n#### Documentation\n\n* **Improve existing docs** with clarifications\n* **Add missing documentation** for features\n* **Fix typos** and improve readability\n\n### Community Contributions\n\n#### Answer Questions\n\n* **Help in Discord** - Answer questions in real-time\n* **GitHub Discussions** - Provide detailed answers\n* **Stack Overflow** - Help with tagged questions\n\n#### Share Knowledge\n\n* **Write tutorials** and guides\n* **Create code examples** and samples\n* **Share integration stories**\n\n#### Translation\n\n* **Translate documentation** to other languages\n* **Localize content** for different regions\n* **Maintain translations** over time\n\n## Getting Started\n\n### Prerequisites\n\n* **Git** - Version control\n* **Node.js** - v18 or higher\n* **npm** - Package manager\n* **Code Editor** - VS Code recommended\n\n### Setup Development Environment\n\n1. **Fork the repository**\n\n   ```bash\n   # Fork on GitHub, then clone\n   git clone https://github.com/your-username/hackmamba.git\n   cd hackmamba\n   ```\n\n2. **Install dependencies**\n\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment**\n\n   ```bash\n   cp .env.example .env.local\n   # Edit .env.local with your values\n   ```\n\n4. **Start development server**\n   ```bash\n   npm run dev\n   ```\n\n### Development Workflow\n\n1. **Create a branch**\n\n   ```bash\n   git checkout -b feature/your-feature-name\n   ```\n\n2. **Make changes**\n\n   * Write code following our style guide\n   * Add tests for new functionality\n   * Update documentation as needed\n\n3. **Test your changes**\n\n   ```bash\n   npm test\n   npm run lint\n   npm run build\n   ```\n\n4. **Commit changes**\n\n   ```bash\n   git add .\n   git commit -m \"feat: add new feature\"\n   ```\n\n5. **Push and create PR**\n   ```bash\n   git push origin feature/your-feature-name\n   # Create pull request on GitHub\n   ```\n\n## Code Style Guide\n\n### JavaScript/TypeScript\n\n* **Use TypeScript** for new code\n* **Follow ESLint rules** - configured in project\n* **Use Prettier** for code formatting\n* **Write meaningful names** for variables and functions\n\n```typescript\n// Good\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nasync function createUser(userData: CreateUserRequest): Promise<User> {\n  // Implementation\n}\n\n// Bad\ninterface u {\n  i: string;\n  n: string;\n  e: string;\n}\n\nasync function create(u: any): Promise<any> {\n  // Implementation\n}\n```\n\n### Documentation\n\n* **Use Markdown** for documentation\n* **Include examples** in code blocks\n* **Write clear descriptions** for functions and classes\n* **Update README** for significant changes\n\n````markdown\n## Function Name\n\nBrief description of what the function does.\n\n### Parameters\n\n- `param1` (string): Description of parameter\n- `param2` (number): Description of parameter\n\n### Returns\n\nDescription of return value.\n\n### Example\n\n```typescript\nconst result = functionName(\"example\", 123);\nconsole.log(result); // Expected output\n```\n````\n\n````\n\n## Pull Request Guidelines\n\n### Before Submitting\n\n- [ ] **Code follows** style guidelines\n- [ ] **Tests pass** locally\n- [ ] **Documentation updated** if needed\n- [ ] **No console errors** or warnings\n- [ ] **Feature works** as expected\n\n### PR Description\n\nInclude the following in your PR description:\n\n- **What** - What changes are made\n- **Why** - Why these changes are needed\n- **How** - How the changes work\n- **Testing** - How to test the changes\n\n### Example PR Description\n\n```markdown\n## What\nAdds user creation API endpoint with validation.\n\n## Why\nUsers need a way to create new accounts through the API.\n\n## How\n- Added POST /v1/users endpoint\n- Implemented input validation\n- Added error handling for duplicate emails\n- Created comprehensive tests\n\n## Testing\n- Run `npm test` to run all tests\n- Test with Postman collection in /docs/api\n- Verify error handling with invalid data\n````\n\n## Issue Guidelines\n\n### Bug Reports\n\nUse the bug report template:\n\n```markdown\n## Bug Description\n\nBrief description of the bug.\n\n## Steps to Reproduce\n\n1. Go to '...'\n2. Click on '...'\n3. See error\n\n## Expected Behavior\n\nWhat should happen.\n\n## Actual Behavior\n\nWhat actually happens.\n\n## Environment\n\n- OS: [e.g., Windows 10]\n- Browser: [e.g., Chrome 91]\n- Version: [e.g., 1.2.3]\n\n## Additional Context\n\nAny other context about the problem.\n```\n\n### Feature Requests\n\nUse the feature request template:\n\n```markdown\n## Feature Description\n\nBrief description of the feature.\n\n## Problem Statement\n\nWhat problem does this solve?\n\n## Proposed Solution\n\nHow should this work?\n\n## Alternatives Considered\n\nWhat other solutions were considered?\n\n## Additional Context\n\nAny other context or screenshots.\n```\n\n## Community Guidelines\n\n### Code of Conduct\n\n* **Be respectful** and inclusive\n* **Be constructive** in feedback\n* **Be patient** with newcomers\n* **Be collaborative** in discussions\n\n### Communication\n\n* **Use clear language** in issues and PRs\n* **Be specific** about problems and solutions\n* **Ask questions** when unclear\n* **Help others** when you can\n\n## Recognition\n\n### Contributors\n\nWe recognize contributors in several ways:\n\n* **Contributor badges** on GitHub\n* **Hall of Fame** in documentation\n* **Swag** for significant contributions\n* **Conference speaking** opportunities\n\n### Types of Contributions\n\n* **Code** - Bug fixes, features, tests\n* **Documentation** - Guides, examples, translations\n* **Community** - Helping others, answering questions\n* **Design** - UI/UX improvements, graphics\n\n## Getting Help\n\n### Questions About Contributing\n\n* **GitHub Discussions** - General questions\n* **Discord** - Real-time help\n* **Email** - [contributors@hackmamba.com](mailto:contributors@hackmamba.com)\n\n### Mentorship\n\n* **New contributor** program\n* **Pair programming** sessions\n* **Code review** guidance\n* **Learning resources**\n\n<Cards>\n  <Card title=\"Community\" href=\"/docs/community\" description=\"Join our developer community\" />\n\n  <Card title=\"Support\" href=\"/docs/support\" description=\"Get technical support\" />\n\n  <Card title=\"Feedback\" href=\"/docs/feedback\" description=\"Share your feedback\" />\n</Cards>\n\n\n# Feature Requests (/docs/community-support/feature-requests)\n\nHelp shape the future of Hackmamba by requesting new features and improvements.\n\n## How to Submit Feature Requests\n\n### GitHub Issues (Recommended)\n\nSubmit feature requests through GitHub Issues:\n\n1. **Search existing issues** - Check if your request already exists\n2. **Use the template** - Use our feature request template\n3. **Provide details** - Include use case, examples, and impact\n4. **Vote and discuss** - Engage with the community\n\n### Other Channels\n\n* **Discord** - Share ideas in `#feature-requests`\n* **Email** - Send to [features@hackmamba.com](mailto:features@hackmamba.com)\n* **Community Survey** - Participate in quarterly surveys\n\n## Feature Request Template\n\n```markdown\n## Feature Description\n\nBrief description of the feature you'd like to see.\n\n## Problem Statement\n\nWhat problem does this feature solve? What pain point does it address?\n\n## Proposed Solution\n\nHow should this feature work? What would the user experience be like?\n\n## Use Cases\n\nDescribe specific scenarios where this feature would be valuable:\n\n- Use case 1: [Description]\n- Use case 2: [Description]\n- Use case 3: [Description]\n\n## Alternatives Considered\n\nWhat other solutions have you considered? Why is this approach better?\n\n## Additional Context\n\nAny other context, mockups, or examples that would help explain the feature.\n```\n\n## Feature Request Examples\n\n### Good Feature Request\n\n````markdown\n## Feature Description\n\nAdd webhook retry configuration to allow custom retry policies.\n\n## Problem Statement\n\nCurrently, webhooks retry 3 times with fixed intervals (1min, 5min, 15min). Our application needs different retry behavior - we want to retry more times with shorter intervals for critical events.\n\n## Proposed Solution\n\nAdd a `retry_policy` field to webhook configuration:\n\n```json\n{\n  \"url\": \"https://example.com/webhook\",\n  \"events\": [\"payment.succeeded\"],\n  \"retry_policy\": {\n    \"max_attempts\": 10,\n    \"intervals\": [30, 60, 120, 300, 600], // seconds\n    \"backoff\": \"exponential\"\n  }\n}\n```\n````\n\n## Use Cases\n\n* Critical payment notifications need immediate retry\n* Different retry policies for different event types\n* Custom backoff strategies for specific applications\n\n## Alternatives Considered\n\n* Using a message queue (adds complexity)\n* Implementing retry logic in our application (redundant)\n* Accepting current retry behavior (not suitable for our needs)\n\n## Additional Context\n\nThis would be especially valuable for financial applications where delayed notifications can impact user experience.\n\n````\n\n### API Feature Request\n\n```markdown\n## Feature Description\nAdd bulk operations for user management.\n\n## Problem Statement\nWe need to update hundreds of users at once (e.g., changing user roles during a migration). Currently, we have to make individual API calls, which is slow and hits rate limits.\n\n## Proposed Solution\nAdd bulk endpoints:\n- `POST /v1/users/bulk-update` - Update multiple users\n- `POST /v1/users/bulk-delete` - Delete multiple users\n- `POST /v1/users/bulk-create` - Create multiple users\n\n## Use Cases\n- User role migrations\n- Bulk user imports\n- Account cleanup operations\n- Data synchronization\n\n## Alternatives Considered\n- Using individual API calls (current approach - too slow)\n- Using webhooks to trigger bulk operations (complex)\n- Implementing our own bulk operations (redundant)\n\n## Additional Context\nThis would significantly improve our migration processes and reduce API calls.\n````\n\n## Feature Prioritization\n\n### How We Prioritize Features\n\nWe consider several factors when prioritizing features:\n\n* **User Impact** - How many users would benefit?\n* **Business Value** - Does it align with our goals?\n* **Technical Effort** - How complex is it to implement?\n* **User Demand** - How many requests do we receive?\n* **Strategic Fit** - Does it fit our roadmap?\n\n### Priority Levels\n\n* **P0 - Critical** - Security issues, breaking changes\n* **P1 - High** - Major features, significant improvements\n* **P2 - Medium** - Important features, nice-to-have improvements\n* **P3 - Low** - Minor features, future considerations\n\n## Voting and Discussion\n\n### Voting on Features\n\n* **GitHub Issues** - Use 👍 reactions to vote\n* **Discord** - React with emojis to show support\n* **Surveys** - Participate in formal voting\n\n### Discussing Features\n\n* **GitHub Discussions** - Detailed discussions\n* **Discord** - Real-time chat\n* **Community Calls** - Monthly feature discussions\n\n## Feature Status\n\n### Status Tracking\n\nWe track feature requests through these statuses:\n\n* **Under Review** - Being evaluated by product team\n* **Planned** - Approved and planned for development\n* **In Development** - Currently being built\n* **Beta Testing** - Available for testing\n* **Released** - Available in production\n* **Rejected** - Not planned for implementation\n\n### Status Updates\n\n* **Monthly updates** - Status changes posted to GitHub\n* **Release notes** - New features announced\n* **Beta announcements** - Early access opportunities\n\n## Current Roadmap\n\n### Q1 2024\n\n* [ ] Bulk user operations\n* [ ] Enhanced webhook configuration\n* [ ] Improved error messages\n\n### Q2 2024\n\n* [ ] GraphQL API\n* [ ] Real-time subscriptions\n* [ ] Advanced analytics\n\n### Q3 2024\n\n* [ ] Mobile SDKs\n* [ ] Plugin marketplace\n* [ ] Advanced security features\n\n## Contributing to Features\n\n### Implementation\n\nWant to help implement a feature?\n\n1. **Check the roadmap** - See what's planned\n2. **Look for \"help wanted\"** labels on GitHub Issues\n3. **Contact maintainers** - Discuss implementation approach\n4. **Submit PR** - Follow contribution guidelines\n\n### Design and UX\n\nHelp with design and user experience:\n\n* **Mockups** - Create visual designs\n* **User flows** - Design user journeys\n* **Accessibility** - Ensure inclusive design\n* **Testing** - Participate in usability testing\n\n## Feature Request Best Practices\n\n### Before Submitting\n\n1. **Search existing requests** - Avoid duplicates\n2. **Check roadmap** - See if already planned\n3. **Gather feedback** - Discuss with community first\n4. **Prepare details** - Have use cases and examples ready\n\n### Writing Effective Requests\n\n* **Be specific** - Clear description of what you want\n* **Explain the problem** - Why is this needed?\n* **Provide examples** - Show how it would work\n* **Consider alternatives** - What else could work?\n\n### Following Up\n\n* **Vote on others** - Support related requests\n* **Provide feedback** - Help refine the feature\n* **Test betas** - Help test implementations\n* **Share use cases** - Provide real-world examples\n\n## Community Feature Requests\n\n### Popular Requests\n\nBased on community voting:\n\n1. **Bulk Operations** - Batch API calls\n2. **GraphQL API** - More flexible querying\n3. **Real-time Updates** - WebSocket connections\n4. **Mobile SDKs** - Native mobile support\n5. **Advanced Analytics** - Better insights\n\n### Recent Additions\n\nFeatures added based on community requests:\n\n* **Webhook retry configuration** - Custom retry policies\n* **Enhanced error messages** - More helpful error details\n* **Rate limit headers** - Better rate limit visibility\n* **SDK improvements** - Better developer experience\n\n<Cards>\n  <Card title=\"Community\" href=\"/docs/community\" description=\"Join our developer community\" />\n\n  <Card title=\"Feedback\" href=\"/docs/feedback\" description=\"Share your feedback\" />\n\n  <Card title=\"Contributing\" href=\"/docs/contributing\" description=\"Contribute to the project\" />\n</Cards>\n\n\n# Feedback (/docs/community-support/feedback)\n\nYour feedback helps us improve Hackmamba and make it better for everyone.\n\n## How to Share Feedback\n\n### Quick Feedback\n\nFor quick feedback and suggestions:\n\n* **Discord** - Share in `#feedback` channel\n* **GitHub Discussions** - Post in \"Feedback\" category\n* **Email** - [feedback@hackmamba.com](mailto:feedback@hackmamba.com)\n\n### Detailed Feedback\n\nFor detailed feedback and feature requests:\n\n* **GitHub Issues** - Use feature request template\n* **Survey** - Complete our quarterly feedback survey\n* **Interview** - Participate in user research sessions\n\n## Types of Feedback\n\n### Product Feedback\n\nHelp us improve the product:\n\n* **Feature requests** - What features do you need?\n* **UI/UX feedback** - How can we improve the interface?\n* **Performance** - Are there performance issues?\n* **Usability** - What's confusing or difficult?\n\n### Documentation Feedback\n\nHelp us improve our documentation:\n\n* **Missing information** - What's not documented?\n* **Unclear explanations** - What's confusing?\n* **Incorrect information** - What's wrong?\n* **Better examples** - What examples would help?\n\n### API Feedback\n\nHelp us improve our API:\n\n* **Missing endpoints** - What endpoints do you need?\n* **Response format** - How can responses be better?\n* **Error messages** - Are error messages helpful?\n* **Rate limits** - Are limits appropriate?\n\n## Feedback Guidelines\n\n### Be Specific\n\nInstead of:\n\n> \"The API is hard to use\"\n\nSay:\n\n> \"The user creation endpoint requires too many optional fields, making it confusing to know what's required\"\n\n### Provide Context\n\nInclude relevant information:\n\n* **Use case** - What are you trying to accomplish?\n* **Environment** - What's your setup?\n* **Impact** - How does this affect your work?\n\n### Suggest Solutions\n\nWhen possible, suggest solutions:\n\n* **Alternative approaches** - How could this work better?\n* **Examples** - What would good examples look like?\n* **Priorities** - How important is this to you?\n\n## Feedback Examples\n\n### Good Feedback\n\n````markdown\n## Feature Request: Batch User Creation\n\n### Use Case\n\nWe need to create hundreds of users at once during our onboarding process. Currently, we have to make individual API calls for each user, which is slow and hits rate limits.\n\n### Current Workaround\n\nWe're using Promise.all() with individual API calls, but this often fails due to rate limiting.\n\n### Proposed Solution\n\nAdd a batch endpoint like POST /v1/users/batch that accepts an array of user objects and returns an array of results.\n\n### Example API\n\n```json\nPOST /v1/users/batch\n{\n  \"users\": [\n    {\"name\": \"User 1\", \"email\": \"user1@example.com\"},\n    {\"name\": \"User 2\", \"email\": \"user2@example.com\"}\n  ]\n}\n```\n````\n\n### Priority\n\nHigh - This would significantly improve our onboarding process.\n\n````\n\n### Documentation Feedback\n\n```markdown\n## Documentation Issue: Missing Error Codes\n\n### Problem\nThe API reference doesn't list all possible error codes. When we get a 400 error, we don't know what specific error code to handle.\n\n### Location\n/docs/api-reference - Error Handling section\n\n### Suggested Fix\nAdd a complete list of error codes with descriptions and examples.\n\n### Example\n```json\n{\n  \"error\": {\n    \"code\": \"invalid_email_format\",\n    \"message\": \"The email address format is invalid\",\n    \"field\": \"email\"\n  }\n}\n````\n\n````\n\n## Feedback Process\n\n### How We Handle Feedback\n\n1. **Collection** - We collect feedback from multiple channels\n2. **Review** - Product team reviews all feedback\n3. **Prioritization** - We prioritize based on impact and effort\n4. **Planning** - We plan features and improvements\n5. **Implementation** - We build and test changes\n6. **Communication** - We update the community on progress\n\n### Response Times\n\n- **Acknowledgment** - Within 1-2 business days\n- **Initial response** - Within 1 week\n- **Status updates** - Monthly for major requests\n\n## User Research\n\n### Participate in Research\n\nHelp us understand your needs:\n\n- **User interviews** - 30-minute video calls\n- **Usability testing** - Test new features\n- **Surveys** - Quick feedback on specific topics\n- **Beta testing** - Early access to new features\n\n### Research Benefits\n\n- **Early access** to new features\n- **Influence** product direction\n- **Recognition** as a beta tester\n- **Swag** and rewards\n\n## Feature Requests\n\n### Submitting Feature Requests\n\n1. **Check existing requests** - Search GitHub Issues first\n2. **Use template** - Use our feature request template\n3. **Provide details** - Include use case and examples\n4. **Vote on others** - Vote on existing requests\n\n### Feature Request Template\n\n```markdown\n## Feature Description\nBrief description of the feature.\n\n## Problem Statement\nWhat problem does this solve?\n\n## Proposed Solution\nHow should this work?\n\n## Use Cases\n- Use case 1\n- Use case 2\n- Use case 3\n\n## Alternatives Considered\nWhat other solutions were considered?\n\n## Additional Context\nAny other context or screenshots.\n````\n\n## Bug Reports\n\n### Reporting Bugs\n\n1. **Search existing issues** - Check if already reported\n2. **Use bug template** - Use our bug report template\n3. **Include details** - Steps to reproduce, environment, etc.\n4. **Test in sandbox** - Verify in test environment first\n\n## Community Feedback\n\n### Voting and Discussion\n\n* **GitHub Issues** - Vote with 👍 reactions\n* **GitHub Discussions** - Discuss and refine ideas\n* **Discord** - Real-time discussion\n* **Surveys** - Formal feedback collection\n\n### Feedback Categories\n\n* **High Priority** - Critical issues affecting many users\n* **Medium Priority** - Important improvements\n* **Low Priority** - Nice-to-have features\n* **Future Consideration** - Ideas for future versions\n\n## Recognition\n\n### Feedback Contributors\n\nWe recognize valuable feedback:\n\n* **Contributor badges** on GitHub\n* **Beta tester** recognition\n* **Early access** to new features\n* **Swag** for significant contributions\n\n### Feedback Impact\n\nYour feedback directly influences:\n\n* **Product roadmap** - What we build next\n* **API design** - How endpoints work\n* **Documentation** - What we document\n* **Community** - How we support users\n\n<Cards>\n  <Card title=\"Community\" href=\"/docs/community\" description=\"Join our developer community\" />\n\n  <Card title=\"Support\" href=\"/docs/support\" description=\"Get technical support\" />\n\n  <Card title=\"Feature Requests\" href=\"/docs/feature-requests\" description=\"Request new features\" />\n</Cards>\n\n\n# Support (/docs/community-support/support)\n\nGet the help you need with our comprehensive support options.\n\n## Support Options\n\n### Documentation\n\nStart with our comprehensive documentation:\n\n* **API Reference** - Complete API documentation\n* **SDKs** - Official SDKs and examples\n* **Guides** - Step-by-step integration guides\n* **Troubleshooting** - Common issues and solutions\n\n### Community Support\n\nGet help from our community:\n\n* **Discord** - Real-time chat support\n* **GitHub Discussions** - Q\\&A and discussions\n* **Stack Overflow** - Tagged questions and answers\n\n### Direct Support\n\nFor direct technical support:\n\n* **Email Support** - [support@hackmamba.com](mailto:support@hackmamba.com)\n* **Priority Support** - Available for Pro and Enterprise plans\n* **Emergency Support** - 24/7 for Enterprise customers\n\n## Support Tiers\n\n### Free Tier\n\n* **Community Support** - Discord and GitHub Discussions\n* **Documentation** - Full access to documentation\n* **Response Time** - Community-driven (no SLA)\n\n### Pro Tier\n\n* **Email Support** - Direct email support\n* **Response Time** - 24-48 hours\n* **Priority** - Higher priority in community channels\n\n### Enterprise Tier\n\n* **Dedicated Support** - Assigned support engineer\n* **Response Time** - 4-8 hours\n* **Emergency Support** - 24/7 phone support\n* **SLA** - Guaranteed response times\n\n## Getting Help\n\n### Before Contacting Support\n\n1. **Check Documentation** - Search our docs for answers\n2. **Search Community** - Look for similar issues\n3. **Try Troubleshooting** - Use our troubleshooting guide\n4. **Test in Sandbox** - Verify in test environment\n\n### Contacting Support\n\nWhen contacting support, include:\n\n* **Account Information** - Account email or ID\n* **Issue Description** - Clear description of the problem\n* **Steps to Reproduce** - How to reproduce the issue\n* **Error Messages** - Full error messages and logs\n* **Environment Details** - SDK version, environment, etc.\n\n### Support Request Template\n\n```\nSubject: [Priority] Issue with user creation API\n\nAccount: user@example.com\nPlan: Pro\nEnvironment: Production\n\nIssue Description:\nUnable to create users via API, getting 400 error.\n\nSteps to Reproduce:\n1. Call POST /v1/users with valid data\n2. Receive 400 Bad Request error\n3. Error message: \"Invalid request\"\n\nRequest Details:\n- SDK: @hackmamba/sdk v1.2.3\n- Environment: Production\n- API Key: sk_live_... (masked)\n\nError Logs:\n[Include relevant error logs]\n\nExpected Behavior:\nUser should be created successfully.\n\nActual Behavior:\nRequest fails with 400 error.\n```\n\n## Response Times\n\n### Standard Support\n\n* **Free Tier**: Community support only\n* **Pro Tier**: 24-48 hours\n* **Enterprise Tier**: 4-8 hours\n\n### Emergency Support\n\n* **Enterprise Tier**: 1-2 hours\n* **Available**: 24/7\n* **Contact**: [emergency@hackmamba.com](mailto:emergency@hackmamba.com)\n\n## Escalation Process\n\n### When to Escalate\n\nEscalate your issue if:\n\n* **No response** within expected timeframe\n* **Issue is blocking** production systems\n* **Security concern** or data breach\n* **Service outage** affecting multiple users\n\n### How to Escalate\n\n1. **Email escalation** to [support@hackmamba.com](mailto:support@hackmamba.com)\n2. **Include \"ESCALATION\"** in subject line\n3. **Reference original ticket** number\n4. **Explain urgency** and business impact\n\n## Status Updates\n\n### Service Status\n\nCheck our service status:\n\n* **Status Page**: [status.hackmamba.com](https://status.hackmamba.com)\n* **Incident Updates** - Real-time status updates\n* **Maintenance Windows** - Scheduled maintenance notifications\n\n### API Status\n\nMonitor API health:\n\n* **API Health Check**: [api.hackmamba.com/health](https://api.hackmamba.com/health)\n* **Response Times** - Current API response times\n* **Error Rates** - Current error rates by endpoint\n\n## Feedback and Improvement\n\n### Feature Requests\n\nSubmit feature requests:\n\n* **GitHub Issues** - [github.com/hackmamba/feedback](https://github.com/hackmamba/feedback)\n* **Email** - [feedback@hackmamba.com](mailto:feedback@hackmamba.com)\n* **Community** - GitHub Discussions\n\n### Bug Reports\n\nReport bugs:\n\n* **GitHub Issues** - Use bug report template\n* **Email** - [bugs@hackmamba.com](mailto:bugs@hackmamba.com)\n* **Include** - Steps to reproduce, expected vs actual behavior\n\n### Feedback Process\n\n1. **Submit feedback** through appropriate channel\n2. **Community discussion** for feature requests\n3. **Product team review** and prioritization\n4. **Development** and testing\n5. **Release** and announcement\n\n## Support Resources\n\n### Knowledge Base\n\n* **FAQ** - Frequently asked questions\n* **Tutorials** - Step-by-step guides\n* **Best Practices** - Integration best practices\n* **Code Examples** - Sample implementations\n\n### Video Resources\n\n* **Getting Started** - Introduction videos\n* **API Walkthrough** - API demonstration\n* **Integration Examples** - Real-world examples\n* **Webinars** - Monthly technical webinars\n\n### Tools and Utilities\n\n* **API Explorer** - Interactive API testing\n* **Webhook Tester** - Test webhook endpoints\n* **SDK Generator** - Generate SDKs for your language\n* **Code Snippets** - Reusable code examples\n\n<Cards>\n  <Card title=\"Community\" href=\"/docs/community\" description=\"Join our developer community\" />\n\n  <Card title=\"Contributing\" href=\"/docs/contributing\" description=\"Contribute to the project\" />\n\n  <Card title=\"Feature Requests\" href=\"/docs/feature-requests\" description=\"Request new features\" />\n</Cards>\n\n\n# Configuration (/docs/getting-started/configuration)\n\n# Configuration\n\nConfigure your Hackmamba documentation template to match your project's needs.\n\n## Basic Configuration\n\n### Site Information\n\nUpdate your site information in `lib/layout.shared.tsx`:\n\n```typescript\nexport function baseOptions(): BaseLayoutProps {\n  return {\n    nav: {\n      title: \"Your Project Name\",\n      // ... other configuration\n    },\n  };\n}\n```\n\n### Navigation Structure\n\nConfigure your navigation in `content/docs/meta.json`:\n\n```json\n{\n  \"title\": \"Documentation\",\n  \"pages\": [\n    \"index\",\n    {\n      \"title\": \"Getting Started\",\n      \"pages\": [\"overview\", \"installation\"]\n    }\n  ]\n}\n```\n\n## Advanced Configuration\n\n### Custom Styling\n\nModify colors and styling in `app/global.css`:\n\n```css\n:root {\n  --primary-color: #your-color;\n  --secondary-color: #your-secondary-color;\n}\n```\n\n### Search Configuration\n\nEnable or disable search functionality:\n\n```typescript\nexport function baseOptions(): BaseLayoutProps {\n  return {\n    search: true, // Enable search\n    // ... other options\n  };\n}\n```\n\n## Environment Variables\n\nCreate a `.env.local` file for environment-specific settings:\n\n```bash\nNEXT_PUBLIC_SITE_URL=https://your-domain.com\nNEXT_PUBLIC_SITE_NAME=Your Site Name\n```\n\n## Next Steps\n\n<Cards>\n  <Card title=\"Customization\" href=\"/docs/customization\" description=\"Customize the template to match your brand\" />\n\n  <Card title=\"Content Creation\" href=\"/docs/overview\" description=\"Learn how to create great documentation content\" />\n</Cards>\n\n\n# Customization (/docs/getting-started/customization)\n\n# Customization\n\nCustomize the Hackmamba documentation template to match your brand and requirements.\n\n## Brand Customization\n\n### Logo and Branding\n\nUpdate your logo in `lib/layout.shared.tsx`:\n\n```typescript\nnav: {\n  title: (\n    <>\n      <YourLogoComponent />\n      Your Brand Name\n    </>\n  ),\n}\n```\n\n### Color Scheme\n\nModify colors in `app/global.css`:\n\n```css\n:root {\n  --primary-color: #your-primary-color;\n  --secondary-color: #your-secondary-color;\n  --accent-color: #your-accent-color;\n}\n```\n\n### Typography\n\nCustomize fonts in `app/layout.tsx`:\n\n```typescript\nimport { Inter, Poppins } from \"next/font/google\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\nconst poppins = Poppins({\n  subsets: [\"latin\"],\n  weight: [\"400\", \"600\", \"700\"],\n});\n```\n\n## Layout Customization\n\n### Navigation Structure\n\nModify the navigation in `content/docs/meta.json`:\n\n```json\n{\n  \"title\": \"Your Documentation\",\n  \"pages\": [\n    \"index\",\n    {\n      \"title\": \"Your Section\",\n      \"pages\": [\"page1\", \"page2\"]\n    }\n  ]\n}\n```\n\n### Sidebar Configuration\n\nCustomize sidebar behavior in `app/docs/layout.tsx`:\n\n```typescript\nsidebar={{\n  defaultOpenLevel: 2,\n  collapsible: true,\n}}\n```\n\n## Content Customization\n\n### Page Templates\n\nCreate custom page templates by modifying the MDX components in `mdx-components.tsx`.\n\n### Custom Components\n\nAdd custom components for your specific needs:\n\n```typescript\n// components/CustomCard.tsx\nexport function CustomCard({ title, children }) {\n  return (\n    <div className=\"custom-card\">\n      <h3>{title}</h3>\n      {children}\n    </div>\n  );\n}\n```\n\n## Deployment Customization\n\n### Build Configuration\n\nModify `next.config.mjs` for your deployment needs:\n\n```javascript\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: \"export\", // For static export\n  trailingSlash: true,\n};\n\nexport default nextConfig;\n```\n\n## Best Practices\n\n* Keep customizations minimal and focused\n* Use CSS variables for consistent theming\n* Test changes across different screen sizes\n* Document your customizations\n\n<Cards>\n  <Card title=\"Deployment\" href=\"/docs/customization\" description=\"Deploy your customized documentation\" />\n\n  <Card title=\"Content Guide\" href=\"/docs/overview\" description=\"Learn content creation best practices\" />\n</Cards>\n\n\n# Installation (/docs/getting-started/installation)\n\n# Installation\n\nGet started with the Hackmamba documentation template in just a few steps.\n\n## Prerequisites\n\nBefore you begin, make sure you have the following installed:\n\n* **Node.js** (version 18 or higher)\n* **npm** or **yarn** package manager\n* **Git** for version control\n\n## Quick Start\n\n### 1. Clone the Template\n\n```bash\ngit clone <repository-url>\ncd hmb-docs-template\n```\n\n### 2. Install Dependencies\n\n```bash\nnpm install\n```\n\n### 3. Start Development Server\n\n```bash\nnpm run dev\n```\n\n### 4. Open in Browser\n\nNavigate to `http://localhost:3000` to see your documentation site.\n\n## Project Structure\n\n```\n├── app/                    # Next.js app directory\n├── content/docs/          # Documentation content\n├── lib/                   # Utility functions\n├── public/                # Static assets\n└── package.json          # Dependencies\n```\n\n## Next Steps\n\n<Cards>\n  <Card title=\"Configuration\" href=\"/docs/configuration\" description=\"Learn how to configure your documentation\" />\n\n  <Card title=\"Customization\" href=\"/docs/customization\" description=\"Customize the template to match your brand\" />\n\n  <Card title=\"Deployment\" href=\"/docs/customization\" description=\"Deploy your documentation site\" />\n</Cards>\n\n\n# SDKs (/docs/developer-tools/sdks)\n\n# SDKs\n\nOfficial SDKs and client libraries to help you integrate quickly and easily.\n\n## Available SDKs\n\n### JavaScript/Node.js\n\nOur official JavaScript SDK supports both Node.js and browser environments.\n\n#### Installation\n\n```bash\nnpm install @hackmamba/sdk\n```\n\n#### Usage\n\n```javascript\nimport { HackmambaClient } from \"@hackmamba/sdk\";\n\nconst client = new HackmambaClient({\n  apiKey: \"your-api-key\",\n  environment: \"sandbox\", // or 'production'\n});\n\n// Make API calls\nconst users = await client.users.list();\nconst user = await client.users.get(\"user_123\");\n```\n\n#### Browser Usage\n\n```html\n<script src=\"https://cdn.hackmamba.com/sdk/v1/hackmamba.min.js\"></script>\n<script>\n  const client = new HackmambaClient({\n    apiKey: \"your-api-key\",\n  });\n\n  client.users.list().then((users) => {\n    console.log(users);\n  });\n</script>\n```\n\n### Python\n\nOur Python SDK provides a clean, Pythonic interface to our API.\n\n#### Installation\n\n```bash\npip install hackmamba-sdk\n```\n\n#### Usage\n\n```python\nfrom hackmamba import HackmambaClient\n\nclient = HackmambaClient(\n    api_key='your-api-key',\n    environment='sandbox'\n)\n\n# Make API calls\nusers = client.users.list()\nuser = client.users.get('user_123')\n```\n\n### PHP\n\nPHP SDK for server-side applications.\n\n#### Installation\n\n```bash\ncomposer require hackmamba/sdk\n```\n\n#### Usage\n\n```php\n<?php\nrequire_once 'vendor/autoload.php';\n\nuse Hackmamba\\HackmambaClient;\n\n$client = new HackmambaClient([\n    'api_key' => 'your-api-key',\n    'environment' => 'sandbox'\n]);\n\n// Make API calls\n$users = $client->users->list();\n$user = $client->users->get('user_123');\n```\n\n### Ruby\n\nRuby gem for Ruby applications.\n\n#### Installation\n\n```bash\ngem install hackmamba-sdk\n```\n\n#### Usage\n\n```ruby\nrequire 'hackmamba'\n\nclient = Hackmamba::Client.new(\n  api_key: 'your-api-key',\n  environment: 'sandbox'\n)\n\n# Make API calls\nusers = client.users.list\nuser = client.users.get('user_123')\n```\n\n## SDK Features\n\n### Automatic Authentication\n\nAll SDKs handle authentication automatically:\n\n```javascript\n// No need to manually add headers\nconst client = new HackmambaClient({ apiKey: \"your-key\" });\nconst users = await client.users.list(); // Auth handled automatically\n```\n\n### Rate Limit Handling\n\nSDKs automatically handle rate limiting with exponential backoff:\n\n```python\n# SDK automatically retries on rate limit\nusers = client.users.list()  # Handles 429 responses automatically\n```\n\n### Type Safety\n\nTypeScript definitions are included for better development experience:\n\n```typescript\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  created_at: string;\n}\n\nconst users: User[] = await client.users.list();\n```\n\n### Error Handling\n\nConsistent error handling across all SDKs:\n\n```javascript\ntry {\n  const user = await client.users.get(\"invalid-id\");\n} catch (error) {\n  if (error.code === \"user_not_found\") {\n    console.log(\"User does not exist\");\n  }\n}\n```\n\n## SDK Configuration\n\n### Environment Variables\n\nAll SDKs support environment variables:\n\n```bash\n# Set environment variables\nexport HACKMAMBA_API_KEY=your-api-key\nexport HACKMAMBA_ENVIRONMENT=sandbox\n```\n\n```javascript\n// SDK automatically picks up environment variables\nconst client = new HackmambaClient(); // Uses env vars\n```\n\n### Custom Configuration\n\n```javascript\nconst client = new HackmambaClient({\n  apiKey: \"your-api-key\",\n  environment: \"sandbox\",\n  timeout: 30000, // 30 seconds\n  retries: 3,\n  baseURL: \"https://custom-api.example.com\",\n});\n```\n\n## Examples\n\n### Complete Integration Example\n\n```javascript\nimport { HackmambaClient } from \"@hackmamba/sdk\";\n\nasync function syncUsers() {\n  const client = new HackmambaClient({\n    apiKey: process.env.HACKMAMBA_API_KEY,\n  });\n\n  try {\n    // Get all users\n    const users = await client.users.list();\n\n    // Process each user\n    for (const user of users) {\n      console.log(`Processing user: ${user.name}`);\n\n      // Update user if needed\n      if (user.needsUpdate) {\n        await client.users.update(user.id, {\n          lastSync: new Date().toISOString(),\n        });\n      }\n    }\n\n    console.log(`Synced ${users.length} users successfully`);\n  } catch (error) {\n    console.error(\"Sync failed:\", error.message);\n  }\n}\n```\n\n## Getting Help\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"Authentication\" href=\"/docs/authentication\" description=\"Authentication guide\" />\n\n  <Card title=\"Webhooks\" href=\"/docs/webhooks\" description=\"Set up webhooks for real-time updates\" />\n</Cards>\n\n\n# Testing (/docs/developer-tools/testing)\n\n# Testing\n\nLearn how to test your integration with our API and webhooks.\n\n## Testing Environment\n\n### Sandbox Environment\n\nUse our sandbox environment for testing:\n\n* **Base URL**: `https://api-sandbox.hackmamba.com/v1`\n* **Test API Keys**: Start with `sk_test_`\n* **Test Data**: Separate from production data\n\n### Test API Keys\n\n```bash\n# Test API key (safe to use in code examples)\nexport HACKMAMBA_API_KEY=sk_test_1234567890abcdef\n```\n\n## API Testing\n\n### Manual Testing with cURL\n\nTest API endpoints manually:\n\n```bash\n# Test user creation\ncurl -X POST https://api-sandbox.hackmamba.com/v1/users \\\n  -H \"Authorization: Bearer sk_test_1234567890abcdef\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\"\n  }'\n\n# Test user retrieval\ncurl -H \"Authorization: Bearer sk_test_1234567890abcdef\" \\\n     https://api-sandbox.hackmamba.com/v1/users/user_123\n```\n\n### Automated Testing\n\nWrite automated tests for your integration:\n\n```javascript\n// Jest test example\nconst { HackmambaClient } = require(\"@hackmamba/sdk\");\n\ndescribe(\"Hackmamba Integration\", () => {\n  let client;\n\n  beforeAll(() => {\n    client = new HackmambaClient({\n      apiKey: process.env.HACKMAMBA_TEST_API_KEY,\n      environment: \"sandbox\",\n    });\n  });\n\n  test(\"should create a user\", async () => {\n    const user = await client.users.create({\n      name: \"Test User\",\n      email: \"test@example.com\",\n    });\n\n    expect(user.id).toBeDefined();\n    expect(user.name).toBe(\"Test User\");\n    expect(user.email).toBe(\"test@example.com\");\n  });\n\n  test(\"should retrieve a user\", async () => {\n    const user = await client.users.get(\"user_123\");\n    expect(user).toBeDefined();\n  });\n});\n```\n\n## Webhook Testing\n\n### Local Development Setup\n\nUse ngrok to test webhooks locally:\n\n```bash\n# Install ngrok\nnpm install -g ngrok\n\n# Start your local server\nnpm start\n\n# In another terminal, expose your local server\nngrok http 3000\n```\n\n### Webhook Test Endpoint\n\nCreate a test endpoint to receive webhooks:\n\n```javascript\napp.post(\"/webhooks/test\", (req, res) => {\n  console.log(\"Received webhook:\", req.body);\n\n  // Verify signature\n  const signature = req.headers[\"x-hackmamba-signature\"];\n  if (!verifyWebhookSignature(req.body, signature)) {\n    return res.status(400).send(\"Invalid signature\");\n  }\n\n  // Process the event\n  const event = req.body;\n  console.log(`Event type: ${event.type}`);\n  console.log(`Event data:`, event.data);\n\n  res.status(200).send(\"OK\");\n});\n```\n\n### Register Test Webhook\n\n```bash\ncurl -X POST https://api-sandbox.hackmamba.com/v1/webhooks \\\n  -H \"Authorization: Bearer sk_test_1234567890abcdef\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://abc123.ngrok.io/webhooks/test\",\n    \"events\": [\"user.created\", \"user.updated\"]\n  }'\n```\n\n### Trigger Test Events\n\n```bash\n# Create a test user to trigger webhook\ncurl -X POST https://api-sandbox.hackmamba.com/v1/users \\\n  -H \"Authorization: Bearer sk_test_1234567890abcdef\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Webhook Test User\",\n    \"email\": \"webhook-test@example.com\"\n  }'\n```\n\n## Test Data Management\n\n### Creating Test Data\n\n```javascript\nasync function createTestData() {\n  const testUsers = [\n    { name: \"Alice Johnson\", email: \"alice@test.com\" },\n    { name: \"Bob Smith\", email: \"bob@test.com\" },\n    { name: \"Carol Davis\", email: \"carol@test.com\" },\n  ];\n\n  for (const userData of testUsers) {\n    await client.users.create(userData);\n  }\n}\n```\n\n### Cleaning Up Test Data\n\n```javascript\nasync function cleanupTestData() {\n  const users = await client.users.list();\n  const testUsers = users.filter((user) => user.email.includes(\"@test.com\"));\n\n  for (const user of testUsers) {\n    await client.users.delete(user.id);\n  }\n}\n```\n\n## Error Testing\n\n### Testing Error Responses\n\n```javascript\ntest(\"should handle invalid API key\", async () => {\n  const invalidClient = new HackmambaClient({\n    apiKey: \"sk_invalid_key\",\n  });\n\n  await expect(invalidClient.users.list()).rejects.toThrow(\"Invalid API key\");\n});\n\ntest(\"should handle rate limiting\", async () => {\n  // Make many requests quickly\n  const promises = Array(10)\n    .fill()\n    .map(() => client.users.list());\n\n  const results = await Promise.allSettled(promises);\n  const rateLimited = results.filter(\n    (r) => r.status === \"rejected\" && r.reason.code === \"rate_limit_exceeded\"\n  );\n\n  expect(rateLimited.length).toBeGreaterThan(0);\n});\n```\n\n## Integration Testing\n\n### End-to-End Testing\n\n```javascript\ndescribe(\"Complete Integration Flow\", () => {\n  test(\"should handle user lifecycle\", async () => {\n    // 1. Create user\n    const user = await client.users.create({\n      name: \"Integration Test User\",\n      email: \"integration@test.com\",\n    });\n\n    expect(user.id).toBeDefined();\n\n    // 2. Update user\n    const updatedUser = await client.users.update(user.id, {\n      name: \"Updated Integration Test User\",\n    });\n\n    expect(updatedUser.name).toBe(\"Updated Integration Test User\");\n\n    // 3. Verify webhook was received\n    await waitForWebhookEvent(\"user.updated\", user.id);\n\n    // 4. Delete user\n    await client.users.delete(user.id);\n\n    // 5. Verify user is deleted\n    await expect(client.users.get(user.id)).rejects.toThrow(\"User not found\");\n  });\n});\n```\n\n## Performance Testing\n\n### Load Testing\n\n```javascript\nconst { performance } = require(\"perf_hooks\");\n\nasync function loadTest() {\n  const startTime = performance.now();\n\n  const promises = Array(100)\n    .fill()\n    .map(async (_, index) => {\n      return client.users.create({\n        name: `Load Test User ${index}`,\n        email: `load-test-${index}@example.com`,\n      });\n    });\n\n  const results = await Promise.all(promises);\n  const endTime = performance.now();\n\n  console.log(`Created ${results.length} users in ${endTime - startTime}ms`);\n  console.log(\n    `Average: ${(endTime - startTime) / results.length}ms per request`\n  );\n}\n```\n\n## Testing Checklist\n\n### Pre-Production Testing\n\n* [ ] Test all API endpoints\n* [ ] Verify webhook delivery\n* [ ] Test error handling\n* [ ] Validate rate limiting behavior\n* [ ] Test authentication flows\n* [ ] Verify data consistency\n* [ ] Test edge cases\n* [ ] Performance testing\n* [ ] Security testing\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"Webhooks\" href=\"/docs/webhooks\" description=\"Webhook setup and management\" />\n\n  <Card title=\"Troubleshooting\" href=\"/docs/troubleshooting\" description=\"Common issues and solutions\" />\n</Cards>\n\n\n# Troubleshooting (/docs/developer-tools/troubleshooting)\n\n# Troubleshooting\n\nCommon issues and solutions when integrating with our API.\n\n## Authentication Issues\n\n### Invalid API Key\n\n**Error**: `invalid_api_key`\n\n**Symptoms**:\n\n* 401 Unauthorized responses\n* \"Invalid API key\" error messages\n\n**Solutions**:\n\n1. Verify your API key is correct\n2. Check for extra spaces or characters\n3. Ensure you're using the right environment (sandbox vs production)\n4. Regenerate your API key if needed\n\n```bash\n# Check your API key format\necho $HACKMAMBA_API_KEY\n# Should start with sk_test_ or sk_live_\n```\n\n### Expired Token\n\n**Error**: `expired_token`\n\n**Symptoms**:\n\n* 401 Unauthorized responses\n* \"Token has expired\" error messages\n\n**Solutions**:\n\n1. Refresh your access token\n2. Implement automatic token refresh\n3. Check your system clock synchronization\n\n```javascript\n// Implement token refresh\nasync function refreshToken() {\n  const response = await fetch(\"/oauth/token\", {\n    method: \"POST\",\n    body: new URLSearchParams({\n      grant_type: \"refresh_token\",\n      refresh_token: storedRefreshToken,\n    }),\n  });\n\n  const data = await response.json();\n  // Store new tokens\n}\n```\n\n## Rate Limiting Issues\n\n### Rate Limit Exceeded\n\n**Error**: `rate_limit_exceeded`\n\n**Symptoms**:\n\n* 429 Too Many Requests responses\n* `X-RateLimit-Remaining: 0` headers\n\n**Solutions**:\n\n1. Implement exponential backoff\n2. Reduce request frequency\n3. Use batch endpoints when available\n4. Upgrade your plan for higher limits\n\n```javascript\n// Exponential backoff implementation\nasync function makeRequestWithBackoff(url, options, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      const response = await fetch(url, options);\n\n      if (response.status === 429) {\n        const retryAfter = response.headers.get(\"Retry-After\");\n        const delay = retryAfter\n          ? parseInt(retryAfter) * 1000\n          : Math.pow(2, i) * 1000;\n\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        continue;\n      }\n\n      return response;\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n    }\n  }\n}\n```\n\n## Webhook Issues\n\n### Webhook Not Receiving Events\n\n**Symptoms**:\n\n* No webhook events received\n* Events not triggering\n\n**Solutions**:\n\n1. Verify webhook URL is accessible\n2. Check webhook registration\n3. Ensure HTTPS is used in production\n4. Verify signature validation\n\n```bash\n# Test webhook endpoint\ncurl -X POST https://your-webhook-url.com/webhooks \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"test\": \"data\"}'\n```\n\n### Invalid Webhook Signature\n\n**Error**: Signature verification fails\n\n**Solutions**:\n\n1. Verify webhook secret is correct\n2. Check signature calculation\n3. Ensure raw request body is used\n\n```javascript\n// Correct signature verification\nconst crypto = require(\"crypto\");\n\nfunction verifyWebhookSignature(payload, signature, secret) {\n  const expectedSignature = crypto\n    .createHmac(\"sha256\", secret)\n    .update(payload, \"utf8\") // Use raw body\n    .digest(\"hex\");\n\n  return signature === `sha256=${expectedSignature}`;\n}\n```\n\n## Data Issues\n\n### User Not Found\n\n**Error**: `user_not_found`\n\n**Solutions**:\n\n1. Verify user ID is correct\n2. Check if user was deleted\n3. Ensure you're querying the right environment\n\n```javascript\n// Safe user retrieval\nasync function getUserSafely(userId) {\n  try {\n    return await client.users.get(userId);\n  } catch (error) {\n    if (error.code === \"user_not_found\") {\n      return null; // Handle gracefully\n    }\n    throw error;\n  }\n}\n```\n\n### Invalid Data Format\n\n**Error**: `invalid_request`\n\n**Solutions**:\n\n1. Validate data before sending\n2. Check required fields\n3. Verify data types\n\n```javascript\n// Data validation\nfunction validateUserData(data) {\n  const errors = [];\n\n  if (!data.name || typeof data.name !== \"string\") {\n    errors.push(\"Name is required and must be a string\");\n  }\n\n  if (!data.email || !isValidEmail(data.email)) {\n    errors.push(\"Valid email is required\");\n  }\n\n  if (errors.length > 0) {\n    throw new Error(`Validation failed: ${errors.join(\", \")}`);\n  }\n}\n```\n\n## Network Issues\n\n### Connection Timeouts\n\n**Symptoms**:\n\n* Requests timing out\n* Network errors\n\n**Solutions**:\n\n1. Increase timeout values\n2. Implement retry logic\n3. Check network connectivity\n4. Use connection pooling\n\n```javascript\n// Configure timeouts\nconst client = new HackmambaClient({\n  apiKey: \"your-key\",\n  timeout: 30000, // 30 seconds\n  retries: 3,\n});\n```\n\n### SSL/TLS Issues\n\n**Symptoms**:\n\n* SSL certificate errors\n* Connection refused\n\n**Solutions**:\n\n1. Update certificates\n2. Check TLS version compatibility\n3. Verify certificate chain\n\n```bash\n# Test SSL connection\nopenssl s_client -connect api.hackmamba.com:443\n```\n\n## SDK Issues\n\n### SDK Not Found\n\n**Error**: Module not found\n\n**Solutions**:\n\n1. Install the correct SDK\n2. Check package.json dependencies\n3. Clear node\\_modules and reinstall\n\n```bash\n# Reinstall SDK\nnpm uninstall @hackmamba/sdk\nnpm install @hackmamba/sdk\n```\n\n### Version Compatibility\n\n**Symptoms**:\n\n* Deprecated warnings\n* Feature not available\n\n**Solutions**:\n\n1. Update to latest SDK version\n2. Check API version compatibility\n3. Review changelog for breaking changes\n\n```bash\n# Check SDK version\nnpm list @hackmamba/sdk\n\n# Update to latest\nnpm update @hackmamba/sdk\n```\n\n## Debugging Tips\n\n### Enable Debug Logging\n\n```javascript\n// Enable debug mode\nconst client = new HackmambaClient({\n  apiKey: \"your-key\",\n  debug: true, // Enable debug logging\n});\n```\n\n### Log Request/Response\n\n```javascript\n// Log all requests\nclient.on(\"request\", (req) => {\n  console.log(\"Request:\", req.method, req.url);\n});\n\nclient.on(\"response\", (res) => {\n  console.log(\"Response:\", res.status, res.data);\n});\n```\n\n### Use Request IDs\n\n```javascript\n// Include request ID for tracking\nconst response = await client.users.list({\n  requestId: \"my-unique-request-id\",\n});\n```\n\n## Getting Help\n\n### Check Status Page\n\nVisit our status page for service updates:\n\n* [Status Page](https://status.hackmamba.com)\n\n### Contact Support\n\nIf you're still experiencing issues:\n\n1. **Check Documentation**: Review relevant documentation\n2. **Search Issues**: Look for similar issues in our support forum\n3. **Contact Support**: Reach out with detailed information:\n   * Error messages\n   * Request/response logs\n   * Steps to reproduce\n   * SDK version and environment\n\n### Support Information\n\nWhen contacting support, include:\n\n* API key (masked: `sk_test_...`)\n* SDK version\n* Environment (sandbox/production)\n* Error messages\n* Request IDs\n* Timestamps\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"Testing\" href=\"/docs/testing\" description=\"Testing your integration\" />\n\n  <Card title=\"Support\" href=\"/docs/support\" description=\"Get help and support\" />\n</Cards>\n\n\n# Webhooks (/docs/developer-tools/webhooks)\n\n# Webhooks\n\nSet up webhooks to receive real-time notifications about events in your account.\n\n## Overview\n\nWebhooks allow you to receive instant notifications when events occur in your account, enabling you to build real-time integrations and keep your systems in sync.\n\n## Supported Events\n\n### User Events\n\n* `user.created` - A new user is created\n* `user.updated` - User information is updated\n* `user.deleted` - A user is deleted\n\n### Project Events\n\n* `project.created` - A new project is created\n* `project.updated` - Project settings are updated\n* `project.deleted` - A project is deleted\n\n### Payment Events\n\n* `payment.succeeded` - A payment is completed successfully\n* `payment.failed` - A payment fails\n* `payment.refunded` - A payment is refunded\n\n## Setting Up Webhooks\n\n### 1. Create a Webhook Endpoint\n\nFirst, create an endpoint in your application to receive webhook events:\n\n```javascript\n// Express.js example\napp.post(\"/webhooks/hackmamba\", (req, res) => {\n  const event = req.body;\n\n  // Verify the webhook signature\n  const signature = req.headers[\"x-hackmamba-signature\"];\n  if (!verifyWebhookSignature(req.body, signature)) {\n    return res.status(400).send(\"Invalid signature\");\n  }\n\n  // Process the event\n  handleWebhookEvent(event);\n\n  res.status(200).send(\"OK\");\n});\n```\n\n### 2. Register Your Webhook\n\nRegister your webhook endpoint through the API:\n\n```bash\ncurl -X POST https://api.hackmamba.com/v1/webhooks \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://your-app.com/webhooks/hackmamba\",\n    \"events\": [\"user.created\", \"user.updated\"],\n    \"secret\": \"your-webhook-secret\"\n  }'\n```\n\n### 3. Handle Events\n\nProcess incoming webhook events:\n\n```javascript\nfunction handleWebhookEvent(event) {\n  switch (event.type) {\n    case \"user.created\":\n      console.log(\"New user:\", event.data);\n      // Sync user to your database\n      break;\n\n    case \"user.updated\":\n      console.log(\"Updated user:\", event.data);\n      // Update user in your database\n      break;\n\n    case \"payment.succeeded\":\n      console.log(\"Payment succeeded:\", event.data);\n      // Activate user subscription\n      break;\n\n    default:\n      console.log(\"Unknown event type:\", event.type);\n  }\n}\n```\n\n## Webhook Security\n\n### Signature Verification\n\nAlways verify webhook signatures to ensure events are from Hackmamba:\n\n```javascript\nconst crypto = require(\"crypto\");\n\nfunction verifyWebhookSignature(payload, signature, secret) {\n  const expectedSignature = crypto\n    .createHmac(\"sha256\", secret)\n    .update(payload)\n    .digest(\"hex\");\n\n  return signature === `sha256=${expectedSignature}`;\n}\n```\n\n### HTTPS Only\n\nWebhook endpoints must use HTTPS in production. We will not send webhooks to HTTP endpoints.\n\n## Event Structure\n\nAll webhook events follow this structure:\n\n```json\n{\n  \"id\": \"evt_1234567890\",\n  \"type\": \"user.created\",\n  \"created\": 1640995200,\n  \"data\": {\n    \"object\": \"user\",\n    \"id\": \"user_123\",\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n  },\n  \"livemode\": false,\n  \"pending_webhooks\": 1,\n  \"request\": {\n    \"id\": \"req_1234567890\"\n  }\n}\n```\n\n## Retry Logic\n\nIf your webhook endpoint returns a non-2xx status code, we will retry the webhook:\n\n* **Retry attempts**: Up to 3 times\n* **Retry intervals**: 1 minute, 5 minutes, 15 minutes\n* **Timeout**: 30 seconds per attempt\n\n## Testing Webhooks\n\n### Using ngrok for Local Development\n\n```bash\n# Install ngrok\nnpm install -g ngrok\n\n# Expose your local server\nngrok http 3000\n\n# Use the ngrok URL for webhook registration\ncurl -X POST https://api.hackmamba.com/v1/webhooks \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://abc123.ngrok.io/webhooks/hackmamba\",\n    \"events\": [\"user.created\"]\n  }'\n```\n\n### Webhook Testing Tool\n\nUse our webhook testing tool to send test events:\n\n```bash\ncurl -X POST https://api.hackmamba.com/v1/webhooks/wh_123/test \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n## Managing Webhooks\n\n### List Webhooks\n\n```bash\ncurl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     https://api.hackmamba.com/v1/webhooks\n```\n\n### Update Webhook\n\n```bash\ncurl -X PUT https://api.hackmamba.com/v1/webhooks/wh_123 \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"events\": [\"user.created\", \"user.updated\", \"user.deleted\"]\n  }'\n```\n\n### Delete Webhook\n\n```bash\ncurl -X DELETE https://api.hackmamba.com/v1/webhooks/wh_123 \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n## Best Practices\n\n### Idempotency\n\nMake your webhook handlers idempotent to handle duplicate events:\n\n```javascript\nconst processedEvents = new Set();\n\nfunction handleWebhookEvent(event) {\n  if (processedEvents.has(event.id)) {\n    return; // Already processed\n  }\n\n  // Process event\n  processEvent(event);\n\n  // Mark as processed\n  processedEvents.add(event.id);\n}\n```\n\n### Error Handling\n\nImplement proper error handling and logging:\n\n```javascript\nfunction handleWebhookEvent(event) {\n  try {\n    processEvent(event);\n    console.log(`Successfully processed event ${event.id}`);\n  } catch (error) {\n    console.error(`Failed to process event ${event.id}:`, error);\n    // Don't throw - return 200 to prevent retries\n  }\n}\n```\n\n<Cards>\n  <Card title=\"API Reference\" href=\"/docs/api-reference\" description=\"Complete API documentation\" />\n\n  <Card title=\"SDKs\" href=\"/docs/sdks\" description=\"Official SDKs with webhook support\" />\n\n  <Card title=\"Testing\" href=\"/docs/testing\" description=\"Testing your webhook integration\" />\n</Cards>\n"}